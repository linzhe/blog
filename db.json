{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"6974ddb0953597b845d10c3aec9016f9ed161fbb","modified":1470406777000},{"_id":"source/404.html","hash":"3de330b9cac1b5b785be80951962f92e55746976","modified":1470406777000},{"_id":"source/CNAME","hash":"9a5b6f8f377bf245cfe23bea2445c6998c95f162","modified":1470406777000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1479139920000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1479139920000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1479139920000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1479139920000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1479139920000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1479139920000},{"_id":"themes/next/.DS_Store","hash":"5201b6e373de48f4474c41c382e02187aed5000f","modified":1480766752000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1479139920000},{"_id":"themes/next/_config.yml","hash":"43bea8b9b6c5cae883567fd1f434cc96afe74b44","modified":1480769316000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1479139920000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1479139920000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1479139920000},{"_id":"source/_posts/20160709-markdown-cheatsheet.md","hash":"634489e615e12801bc430e7870417f97aa5a237d","modified":1470406777000},{"_id":"source/_posts/20160710-Setting-up-a-Github-Pages-blog-with-Hexo.md","hash":"c0885cb9ab995fbaed9456731abc03a1cc70ae02","modified":1470406777000},{"_id":"source/_posts/20160714-cache-server-start-up.md","hash":"e31a7d2fa2cc74136f45c82e670edefccdb7669c","modified":1470406777000},{"_id":"source/_posts/20160804-spark-rdd.md","hash":"7eb6ca96c668bf224f1e7798da0e7a39740dfcb4","modified":1470409765000},{"_id":"source/_posts/20160710-build-recommendtion-system.md","hash":"a70c723406f595492531d45a70d2d683b2e8c1ab","modified":1470406777000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1479139920000},{"_id":"source/_posts/20160715-system-log-extract-from-chromium-code.md","hash":"3ffe57aa01846565077c5e2261c9503a5a9e97e6","modified":1470406777000},{"_id":"source/_posts/20160816-spark-mllib-regularizer.md","hash":"97cc15006626df0d13746d5b46e67567a1f0609d","modified":1470499743000},{"_id":"source/_posts/20161126-install-caffe-on-mac.md","hash":"68f299bb160d7ca8cc40140a43ca3e0de5d9f370","modified":1480152486000},{"_id":"source/_posts/20161105-logistic-regression.md","hash":"b54f4444dfb27640c1d6dfc53f47ce158a866d36","modified":1480152522000},{"_id":"source/_posts/20161126-mxnet-for-kaggle-digit-recognizer.md","hash":"e16342ac317724d6c40c5d189ff8aac75ad31eea","modified":1480756527000},{"_id":"source/_posts/20161205-centos6-install-tensoflow.md","hash":"82f6d49a6f983e163a5ad86e97dbd321877c19e2","modified":1480947144000},{"_id":"source/_posts/20161203-word2vec-usage-in-recommendation-system.md","hash":"a2991cf880f66f646ad9ddcbeda91430cb427160","modified":1480765354000},{"_id":"source/_posts/20170419-cpp-pointer-solution.md","hash":"a77255c17a21aa96a3130592e4ecbd8a8dbfd257","modified":1492612891000},{"_id":"source/_posts/20161215-install-and-setting-mysql-sever.md","hash":"a1010998a1be7b2d9d95b244e714a0b4711b9fba","modified":1482035687000},{"_id":"source/_posts/20161218-word2vec_page_1.md","hash":"1ebf4c3652cc48d7199ae3b38c455635cddfbe48","modified":1492612951000},{"_id":"source/about/index.md","hash":"a13dd10a6bc558ba374d308826ba376c846e8e5d","modified":1480770595000},{"_id":"source/_temp/20161204-Google-Wide-Deep-Learning.md","hash":"4077333870c87368a3daafa3d009b9240d9e060b","modified":1480774472000},{"_id":"source/_temp/install-caffe-on-centos.md","hash":"9231948f964a73fb08afc34157813bad9007e482","modified":1480152241000},{"_id":"source/tags/index.md","hash":"33cc92a077f1b2d8683d7b9bbcad73cea811b8f2","modified":1470406777000},{"_id":"source/categories/index.md","hash":"a366f938d7e22e7af4e726281d037b8e2f647aea","modified":1470406777000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1479139920000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1479139920000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1479139920000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1479139920000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1479139920000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1479139920000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1479139920000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1479139920000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1479139920000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1479139920000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1479139920000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1479139920000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1479139920000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1479139920000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1479139920000},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1479139920000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1479139920000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1479139920000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1479139920000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1479139920000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1479139920000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1479139920000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1479139920000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1479139920000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1479139920000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1479139920000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1479139920000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1479139920000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1479139920000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1479139920000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1479139920000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a3ef28678467c45ee9416b41b943252e8036285","modified":1479139920000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1a43dde8c7bc53891be26b915a172b1f01e6bc26","modified":1479139920000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1479139920000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1479139920000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1479139920000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1479139920000},{"_id":"themes/next/layout/_partials/header.swig","hash":"f3627f51810bc906e4020a3fef61bc3629b63581","modified":1479139920000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1479139920000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1479139920000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1479139920000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1479139920000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1479139920000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479139920000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1479139920000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f12f108c1f8e91cc55d49805d42c1fd96cdf51a6","modified":1479139920000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479139920000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b8aaa008aafe4c6e325f7513719e1c251430883e","modified":1479139920000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1479139920000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1479139920000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1479139920000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1479139920000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479139920000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1479139920000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1479139920000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1479139920000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1479139920000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1479139920000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1479139920000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1479139920000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479139920000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479139920000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1479139920000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1479139920000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479139920000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479139920000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1479139920000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1479139920000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1479139920000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1479139920000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1479139920000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1479139920000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1479139920000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1479139920000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1479139920000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1479139920000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1479139920000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1479139920000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"82a2ac14d4200480a36bf10abcc3cc554ad744d6","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1479139920000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1479139920000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1479139920000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c5b28519b446c2af1e8754a6ae4d766823e6b348","modified":1479139920000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1479139920000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1479139920000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1479139920000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1479139920000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1479139920000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1479139920000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1479139920000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1479139920000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1479139920000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1479139920000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1479139920000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1479139920000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1479139920000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1479139920000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1479139920000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1479139920000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1479139920000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1479139920000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1479139920000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1479139920000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1479139920000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1479139920000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1479139920000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479139920000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1479139920000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479139920000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1479139920000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5433b6bc9d8f0c4685e760b326445ac51245b0a8","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5357db10656b260f8b332c67bb06e486bc64a4ad","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479139920000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479139920000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479139920000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1479139920000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1479139920000},{"_id":"public/atom.xml","hash":"b96fa4efa085c585fe93e58f073c093e5392de8f","modified":1492613042887},{"_id":"public/404.html","hash":"84f4f14551b57f98104ad31b958779f07581f17a","modified":1492613044901},{"_id":"public/about/index.html","hash":"e041a3d262f0bfdd491ccad5906b73bd822491db","modified":1492613044903},{"_id":"public/categories/Note/index.html","hash":"dc340098c58cf35003c4e9f3f6b93359f3c25080","modified":1492613044903},{"_id":"public/categories/note/index.html","hash":"443c09bee4bd3e9d013440ea56b570fb04823217","modified":1492613044903},{"_id":"public/tags/github/index.html","hash":"e8cf2692c9f582ae21e37a34225bb0cebf800e82","modified":1492613044903},{"_id":"public/tags/leveldb/index.html","hash":"5223462d09aa2f3871837327794d9b9ea2fe2078","modified":1492613044903},{"_id":"public/tags/redis/index.html","hash":"be180e4b68da0b16fa1ca8f2ca08214e798a817e","modified":1492613044903},{"_id":"public/tags/cache-server/index.html","hash":"54db34e37b7ee59426d687db321036af4cf982aa","modified":1492613044903},{"_id":"public/tags/推荐系统/index.html","hash":"845d2731d3936cdc10251ca1465f8166bbde08fa","modified":1492613044903},{"_id":"public/tags/Spark-MLlib/index.html","hash":"86ec7438f3d1a8d6fa260cda30fdf969e67f1acf","modified":1492613044903},{"_id":"public/categories/cache-server/index.html","hash":"29680c211a4b1437f96a73da07b97c58b833f2d1","modified":1492613044903},{"_id":"public/tags/caffe/index.html","hash":"b44ee48c0012740a55c1d0903419d49a0f32f517","modified":1492613044904},{"_id":"public/tags/mxnet/index.html","hash":"b7c38e304e9de2867f65ea343e28d3ede77e121d","modified":1492613044904},{"_id":"public/tags/机器学习/index.html","hash":"95ffaa5175cc5f8098f5ef710c0a8ebfd1be816f","modified":1492613044904},{"_id":"public/tags/mysql/index.html","hash":"ed4578d121cc5022f144bff66c75fb20b4d140dc","modified":1492613044904},{"_id":"public/tags/tensoflow/index.html","hash":"481960ab1d0998efd05810b1f0e016ce525462de","modified":1492613044904},{"_id":"public/categories/index.html","hash":"8c92767f7d9969638e4b641fb14b360e4094614c","modified":1492613044904},{"_id":"public/tags/index.html","hash":"4d420b0f78cbee2c50b9d1950d93ccf737af2726","modified":1492613044904},{"_id":"public/2016/12/15/20161215-install-and-setting-mysql-sever/index.html","hash":"d15141f3d881e7a3747e3f1940632c0f49117dc1","modified":1492613044904},{"_id":"public/2016/12/05/20161205-centos6-install-tensoflow/index.html","hash":"c20d812ff65421072f5cc166ec95a1bcbc5c4bda","modified":1492613044904},{"_id":"public/2016/12/03/20161203-word2vec-usage-in-recommendation-system/index.html","hash":"96e3b9ce11792326d57d0e4a103453145318be90","modified":1492613044904},{"_id":"public/2016/11/26/20161126-install-caffe-on-mac/index.html","hash":"57f136f584806e6b9d890cb8e0feeb6ea3f2f834","modified":1492613044904},{"_id":"public/2016/11/05/20161105-logistic-regression/index.html","hash":"30b963cf228e00ff4cf91eb7aa448ea64a6bf29a","modified":1492613044904},{"_id":"public/2016/11/26/20161126-mxnet-for-kaggle-digit-recognizer/index.html","hash":"2d49e76062ba81a9c326411193125538a8699e0e","modified":1492613044904},{"_id":"public/2016/07/15/20160715-system-log-extract-from-chromium-code/index.html","hash":"0a3ed5088ce8339a8a779da4333025e0e1285483","modified":1492613044904},{"_id":"public/2016/07/14/20160714-cache-server-start-up/index.html","hash":"618b3835d867312bba47d7f581712513a1660467","modified":1492613044904},{"_id":"public/2016/07/10/20160710-build-recommendtion-system/index.html","hash":"4d322040c104decba3bd9ed2fe122ea4b0f27687","modified":1492613044904},{"_id":"public/2016/07/10/20160710-Setting-up-a-Github-Pages-blog-with-Hexo/index.html","hash":"d15d50dce26cfcd49b93c096e9f730837b2ddf55","modified":1492613044904},{"_id":"public/archives/index.html","hash":"be5dc7deebd1e0f45037e40f8a413cef9d9e2676","modified":1492613044904},{"_id":"public/2016/08/05/20160816-spark-mllib-regularizer/index.html","hash":"a6204909abb8d6a4cb18c5149713d0f3936fc08d","modified":1492613044904},{"_id":"public/2016/07/09/20160709-markdown-cheatsheet/index.html","hash":"53cb48ffd134cdc0e2eaef6bad1e193ecb88078c","modified":1492613044904},{"_id":"public/archives/2016/index.html","hash":"4246bcef4cc6b210348f54262bb11fe35c41a9b3","modified":1492613044904},{"_id":"public/archives/2016/page/2/index.html","hash":"e89d3eacf1549f2a291555367baa8eeb20dab0e3","modified":1492613044904},{"_id":"public/archives/2016/07/index.html","hash":"fb1762d213895c18dff9e3d6f17afca641a22278","modified":1492613044904},{"_id":"public/2016/08/04/20160804-spark-rdd/index.html","hash":"6fdfb639341f539ee6a23c2703d193045141e71d","modified":1492613044904},{"_id":"public/archives/2016/08/index.html","hash":"3b601edccd2319ee4c9d8a905ceb10222c007648","modified":1492613044904},{"_id":"public/archives/2016/11/index.html","hash":"7ce4756a1b37b05287a6b107f3f13d6e4c07321e","modified":1492613044905},{"_id":"public/archives/2016/12/index.html","hash":"0a5db0044c85da1496b37b1d5dd6b4975d9ca4bb","modified":1492613044905},{"_id":"public/categories/Spark/index.html","hash":"3d1bf7b7dc2ac922dda0a6fd71a2958a622ced03","modified":1492613044905},{"_id":"public/categories/github/index.html","hash":"b69cdb968173f2776925069905d631965b295cfa","modified":1492613044905},{"_id":"public/categories/深度学习/index.html","hash":"c99a3e7a215dc0d6cd1f9d8396a1d072c7941e22","modified":1492613044905},{"_id":"public/categories/机器学习/index.html","hash":"cd97e00aa775dd628aa059caf3f63ec145654669","modified":1492613044905},{"_id":"public/index.html","hash":"7123eab7c964e1adff8fedea5f06f5ad29722d04","modified":1492613044905},{"_id":"public/page/2/index.html","hash":"f393408ab7a36de59d485f52113badff11b9293a","modified":1492613044905},{"_id":"public/tags/Markdown/index.html","hash":"7ac23ad099ce4b935eb431a380aa6c629c54f6a1","modified":1492613044905},{"_id":"public/tags/Spark/index.html","hash":"247c1e24037cf102cca65b0eb9a467761dfe1786","modified":1492613044906},{"_id":"public/tags/word2vec/index.html","hash":"163d8c2a1fb8cad7d8ece03e34e2bc9869a4f2ad","modified":1492613044906},{"_id":"public/archives/page/2/index.html","hash":"4a6ff6fe0fa1acd2be7a4fcf2a69bb78ad60999f","modified":1492613044906},{"_id":"public/tags/深度学习/index.html","hash":"1f0427bbfd572425e7ece069367c8b8a42ab6cd3","modified":1492613044906},{"_id":"public/categories/leetcode/index.html","hash":"f26d7c53c6d2de43c83974602836e4d3a3c0eb8b","modified":1492613044908},{"_id":"public/tags/指针/index.html","hash":"bfe57d46b93f26447b69be1a200171ffa591e844","modified":1492613044908},{"_id":"public/tags/链表/index.html","hash":"6695f048b7ad28322d3879e081d256c31d6c188e","modified":1492613044908},{"_id":"public/2017/04/19/20170419-cpp-pointer-solution/index.html","hash":"e2a9cbb9a3f3ff25bd8d0ba5deed9be0e6be3103","modified":1492613044908},{"_id":"public/2016/12/18/20161218-word2vec_page_1/index.html","hash":"3c2e0379a4974c6dbf2f5344373978df0cd44194","modified":1492613044908},{"_id":"public/archives/2017/index.html","hash":"fd07f03e2e423fdf672dd9b131b539ffbb6fd89f","modified":1492613044908},{"_id":"public/archives/2017/04/index.html","hash":"9458a0fcfe0cc8f9a8964742a24dfbbd3ef053b8","modified":1492613044908},{"_id":"source/_posts/20170525-backtracking-401.md","hash":"85c24db86a55c3f00fe55a7c61caee64dd86db0a","modified":1495725369000},{"_id":"source/_posts/20171124-python-tips.md","hash":"cdd21bc1b8fbfcd65e8a7dadb373434bdc11d745","modified":1511522611000}],"Category":[{"name":"Note","_id":"cj1p32ruj000565s66e5pwpsf"},{"name":"github","_id":"cj1p32rur000a65s6cgarmh2o"},{"name":"cache_server","_id":"cj1p32rv0000g65s64lb1wuzu"},{"name":"Spark","_id":"cj1p32rv5000l65s6i39abltb"},{"name":"深度学习","_id":"cj1p32rvj001165s6efse6tte"},{"name":"机器学习","_id":"cj1p32rvp001b65s61bcru32t"},{"name":"note","_id":"cj1p32rvv001m65s6ol1jr2f1"},{"name":"algorithm","_id":"cj1p32rvz001q65s6coexjbtk"},{"name":"leetcode","_id":"cj1p34zv30001fss6zltcoud3"},{"name":"Python","_id":"cjadtkl9r0002ciz7swkzqjv1"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"http://www.linzhe.me\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"http://www.linzhe.me\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n\n","date":"2016-08-05T14:19:37.000Z","updated":"2016-08-05T14:19:37.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj1p32rt1000065s6zzrjys53","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://www.linzhe.me\" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"http://www.linzhe.me\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n\n"},{"title":"关于","date":"2016-07-09T09:42:48.000Z","type":"aout","comments":0,"_content":"\n欢迎！这是 LinZhe 的博客。\n2013年北邮渣硕毕业，从事推荐系统相关数据、算法工作。\n目前主要研究方向是推荐算法，以及数据挖掘。\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-07-09 17:42:48\ntype: \"aout\"\ncomments: false\n---\n\n欢迎！这是 LinZhe 的博客。\n2013年北邮渣硕毕业，从事推荐系统相关数据、算法工作。\n目前主要研究方向是推荐算法，以及数据挖掘。\n\n\n","updated":"2016-12-03T13:09:55.000Z","path":"about/index.html","layout":"page","_id":"cj1p32rua000265s63i2gzdxi","content":"<p>欢迎！这是 LinZhe 的博客。<br>2013年北邮渣硕毕业，从事推荐系统相关数据、算法工作。<br>目前主要研究方向是推荐算法，以及数据挖掘。</p>\n","excerpt":"","more":"<p>欢迎！这是 LinZhe 的博客。<br>2013年北邮渣硕毕业，从事推荐系统相关数据、算法工作。<br>目前主要研究方向是推荐算法，以及数据挖掘。</p>\n"},{"title":"categories","date":"2016-07-09T09:14:23.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-07-09 17:14:23\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-08-05T14:19:37.000Z","path":"categories/index.html","layout":"page","_id":"cj1p32rwn002d65s6cbclz2w6","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-07-09T09:12:25.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-07-09 17:12:25\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-08-05T14:19:37.000Z","path":"tags/index.html","layout":"page","_id":"cj1p32rwo002e65s69w8bxjv0","content":"","excerpt":"","more":""}],"Post":[{"title":"Markdown Cheatsheet","date":"2016-07-09T15:48:25.000Z","_content":"# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n- 列表1\n- 列表2\n\n\n\n1. 序列表1\n2. 序列表2\n\n[链接](http://baidu.com)\n\n![](http://ww4.sinaimg.cn/bmiddle/aa397b7fjw1dzplsgpdw5j.jpg)\n\n> 引用\n> 示例\n\n*斜体*\n\n**粗体**\n\n| Tables   |      Are      |  cool |\n| -------- | :-----------: | ----: |\n| col 3 is | right-aligned | $1600 |\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n\n","source":"_posts/20160709-markdown-cheatsheet.md","raw":"---\ntitle: Markdown Cheatsheet\ndate: 2016-07-09 23:48:25\ntags:\n  - Markdown\ncategories: \n  - Note\n---\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n- 列表1\n- 列表2\n\n\n\n1. 序列表1\n2. 序列表2\n\n[链接](http://baidu.com)\n\n![](http://ww4.sinaimg.cn/bmiddle/aa397b7fjw1dzplsgpdw5j.jpg)\n\n> 引用\n> 示例\n\n*斜体*\n\n**粗体**\n\n| Tables   |      Are      |  cool |\n| -------- | :-----------: | ----: |\n| col 3 is | right-aligned | $1600 |\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n\n","slug":"20160709-markdown-cheatsheet","published":1,"updated":"2016-08-05T14:19:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32ru6000165s62fx6fj39","content":"<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><ul>\n<li>列表1</li>\n<li>列表2</li>\n</ul>\n<ol>\n<li>序列表1</li>\n<li>序列表2</li>\n</ol>\n<p><a href=\"http://baidu.com\" target=\"_blank\" rel=\"external\">链接</a></p>\n<p><img src=\"http://ww4.sinaimg.cn/bmiddle/aa397b7fjw1dzplsgpdw5j.jpg\" alt=\"\"></p>\n<blockquote>\n<p>引用<br>示例</p>\n</blockquote>\n<p><em>斜体</em></p>\n<p><strong>粗体</strong></p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th style=\"text-align:center\">Are</th>\n<th style=\"text-align:right\">cool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>col 3 is</td>\n<td style=\"text-align:center\">right-aligned</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><ul>\n<li>列表1</li>\n<li>列表2</li>\n</ul>\n<ol>\n<li>序列表1</li>\n<li>序列表2</li>\n</ol>\n<p><a href=\"http://baidu.com\">链接</a></p>\n<p><img src=\"http://ww4.sinaimg.cn/bmiddle/aa397b7fjw1dzplsgpdw5j.jpg\" alt=\"\"></p>\n<blockquote>\n<p>引用<br>示例</p>\n</blockquote>\n<p><em>斜体</em></p>\n<p><strong>粗体</strong></p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th style=\"text-align:center\">Are</th>\n<th style=\"text-align:right\">cool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>col 3 is</td>\n<td style=\"text-align:center\">right-aligned</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n"},{"title":"Setting up a Github Pages blog with Hexo","date":"2016-07-09T16:14:33.000Z","_content":"\n### 安装 Node.js\n------\n\n1. 从[Node.js下载地址](https://nodejs.org/en/)下载相应的包进行安装\n2. 在安装好Node.js，会默认安装好npm\n3. 使用npm安装Hexo\n   ```shell\n   npm install -g hexo\n   ```\n\n### 使用Hexo\n------\n#### 创建文件目录\n```shell\n$ hexo init username.github.io\n$ cd username.github.io\n```\n#### 修改相关的配置，使用github部署\n```shell\nvi _config.yml\n```\n在Deployment的配置中添加\n```shell\ndeploy:\n  repo: https://github.com/username/username.github.io\n  type: git\n```\n### 本地测试\n使用Hexo命令\n```shell\nhexo server\n```\n启动本地测试服务，访问[http://localhost:4000](http://localhost:4000)，可以看到默认的主题与blog文章。\n\n### 更多Hexo命令\n```shell\nhexo deploy # 部署到github\nhexo generate # 生成静态文件\nhexo clean    # 清除生成的静态文件\n```\n\n### 更多主题\n\n默认的主题可以在[hexo.io](http://www.hexo.io/theme)中获取，方法很简单，只要将主题的代码chechout到theme目录下，然后修改_config.yml文件中的theme的值，重启测试服务就可以，十分方便。\n","source":"_posts/20160710-Setting-up-a-Github-Pages-blog-with-Hexo.md","raw":"---\ntitle: Setting up a Github Pages blog with Hexo\ndate: 2016-07-10 00:14:33\ntags:\n  - Markdown\n  - github\ncategories:\n  - github\n---\n\n### 安装 Node.js\n------\n\n1. 从[Node.js下载地址](https://nodejs.org/en/)下载相应的包进行安装\n2. 在安装好Node.js，会默认安装好npm\n3. 使用npm安装Hexo\n   ```shell\n   npm install -g hexo\n   ```\n\n### 使用Hexo\n------\n#### 创建文件目录\n```shell\n$ hexo init username.github.io\n$ cd username.github.io\n```\n#### 修改相关的配置，使用github部署\n```shell\nvi _config.yml\n```\n在Deployment的配置中添加\n```shell\ndeploy:\n  repo: https://github.com/username/username.github.io\n  type: git\n```\n### 本地测试\n使用Hexo命令\n```shell\nhexo server\n```\n启动本地测试服务，访问[http://localhost:4000](http://localhost:4000)，可以看到默认的主题与blog文章。\n\n### 更多Hexo命令\n```shell\nhexo deploy # 部署到github\nhexo generate # 生成静态文件\nhexo clean    # 清除生成的静态文件\n```\n\n### 更多主题\n\n默认的主题可以在[hexo.io](http://www.hexo.io/theme)中获取，方法很简单，只要将主题的代码chechout到theme目录下，然后修改_config.yml文件中的theme的值，重启测试服务就可以，十分方便。\n","slug":"20160710-Setting-up-a-Github-Pages-blog-with-Hexo","published":1,"updated":"2016-08-05T14:19:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32ruc000365s6zwjt4i66","content":"<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><hr>\n<ol>\n<li>从<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js下载地址</a>下载相应的包进行安装</li>\n<li>在安装好Node.js，会默认安装好npm</li>\n<li>使用npm安装Hexo<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"使用Hexo\"><a href=\"#使用Hexo\" class=\"headerlink\" title=\"使用Hexo\"></a>使用Hexo</h3><hr>\n<h4 id=\"创建文件目录\"><a href=\"#创建文件目录\" class=\"headerlink\" title=\"创建文件目录\"></a>创建文件目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init username.github.io</div><div class=\"line\">$ cd username.github.io</div></pre></td></tr></table></figure>\n<h4 id=\"修改相关的配置，使用github部署\"><a href=\"#修改相关的配置，使用github部署\" class=\"headerlink\" title=\"修改相关的配置，使用github部署\"></a>修改相关的配置，使用github部署</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi _config.yml</div></pre></td></tr></table></figure>\n<p>在Deployment的配置中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  repo: https://github.com/username/username.github.io</div><div class=\"line\">  type: git</div></pre></td></tr></table></figure></p>\n<h3 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h3><p>使用Hexo命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure></p>\n<p>启动本地测试服务，访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a>，可以看到默认的主题与blog文章。</p>\n<h3 id=\"更多Hexo命令\"><a href=\"#更多Hexo命令\" class=\"headerlink\" title=\"更多Hexo命令\"></a>更多Hexo命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy # 部署到github</div><div class=\"line\">hexo generate # 生成静态文件</div><div class=\"line\">hexo clean    # 清除生成的静态文件</div></pre></td></tr></table></figure>\n<h3 id=\"更多主题\"><a href=\"#更多主题\" class=\"headerlink\" title=\"更多主题\"></a>更多主题</h3><p>默认的主题可以在<a href=\"http://www.hexo.io/theme\" target=\"_blank\" rel=\"external\">hexo.io</a>中获取，方法很简单，只要将主题的代码chechout到theme目录下，然后修改_config.yml文件中的theme的值，重启测试服务就可以，十分方便。</p>\n","excerpt":"","more":"<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><hr>\n<ol>\n<li>从<a href=\"https://nodejs.org/en/\">Node.js下载地址</a>下载相应的包进行安装</li>\n<li>在安装好Node.js，会默认安装好npm</li>\n<li>使用npm安装Hexo<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"使用Hexo\"><a href=\"#使用Hexo\" class=\"headerlink\" title=\"使用Hexo\"></a>使用Hexo</h3><hr>\n<h4 id=\"创建文件目录\"><a href=\"#创建文件目录\" class=\"headerlink\" title=\"创建文件目录\"></a>创建文件目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init username.github.io</div><div class=\"line\">$ cd username.github.io</div></pre></td></tr></table></figure>\n<h4 id=\"修改相关的配置，使用github部署\"><a href=\"#修改相关的配置，使用github部署\" class=\"headerlink\" title=\"修改相关的配置，使用github部署\"></a>修改相关的配置，使用github部署</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi _config.yml</div></pre></td></tr></table></figure>\n<p>在Deployment的配置中添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  repo: https://github.com/username/username.github.io</div><div class=\"line\">  type: git</div></pre></td></tr></table></figure></p>\n<h3 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h3><p>使用Hexo命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure></p>\n<p>启动本地测试服务，访问<a href=\"http://localhost:4000\">http://localhost:4000</a>，可以看到默认的主题与blog文章。</p>\n<h3 id=\"更多Hexo命令\"><a href=\"#更多Hexo命令\" class=\"headerlink\" title=\"更多Hexo命令\"></a>更多Hexo命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy # 部署到github</div><div class=\"line\">hexo generate # 生成静态文件</div><div class=\"line\">hexo clean    # 清除生成的静态文件</div></pre></td></tr></table></figure>\n<h3 id=\"更多主题\"><a href=\"#更多主题\" class=\"headerlink\" title=\"更多主题\"></a>更多主题</h3><p>默认的主题可以在<a href=\"http://www.hexo.io/theme\">hexo.io</a>中获取，方法很简单，只要将主题的代码chechout到theme目录下，然后修改_config.yml文件中的theme的值，重启测试服务就可以，十分方便。</p>\n"},{"title":"cache server： 冷热数据切换","date":"2016-07-14T11:43:00.000Z","_content":"\n### 背景\nleveldb是一个Google开发的高性能的字符串类型的K-V存储C/C++类库，其详细介绍可参考[Github主页](https://github.com/google/leveldb)，刚开始工作时使用过一段时间，用于存储爬虫系统爬取的大量网页数据。但是后来就一直没有使用过。\n最近在做推荐时，发现user profile的数据实在太大，即使有类似于Redis集群1T的内存也没法将用户所有有数据cache下来，一直想着能不能做个冷热的备件系统加大对user profile数据存储数量，结合leveldb和redis。\n\n### leveldb的优势\nLevelDB内部采用连续的块存储数据，充分发挥了顺序磁盘I/O的性能，并且运用了现代操作系统里的高性能缓冲区管理。这样的结构正好迎合了现代内存的层次式结构， 避免了与产生高性能的操作系统决策之间的冲突。\n\n### redis\nRedis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。\nRedis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n从3.0版本开始，Redis支持数据的备份，即master-slave模式的数据备份。\n\n### 冷热数据\n因为redis强劲的性能，与leveldb互相配合，将冷热数据分开存储，互相交换数据，以达到冷热切换的目的。\n\n","source":"_posts/20160714-cache-server-start-up.md","raw":"---\ntitle:  cache server： 冷热数据切换\ndate: 2016-07-14 19:43:00\ntags:\n  - leveldb\n  - redis\n  - cache_server \ncategory:\n  - cache_server\n---\n\n### 背景\nleveldb是一个Google开发的高性能的字符串类型的K-V存储C/C++类库，其详细介绍可参考[Github主页](https://github.com/google/leveldb)，刚开始工作时使用过一段时间，用于存储爬虫系统爬取的大量网页数据。但是后来就一直没有使用过。\n最近在做推荐时，发现user profile的数据实在太大，即使有类似于Redis集群1T的内存也没法将用户所有有数据cache下来，一直想着能不能做个冷热的备件系统加大对user profile数据存储数量，结合leveldb和redis。\n\n### leveldb的优势\nLevelDB内部采用连续的块存储数据，充分发挥了顺序磁盘I/O的性能，并且运用了现代操作系统里的高性能缓冲区管理。这样的结构正好迎合了现代内存的层次式结构， 避免了与产生高性能的操作系统决策之间的冲突。\n\n### redis\nRedis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。\nRedis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n从3.0版本开始，Redis支持数据的备份，即master-slave模式的数据备份。\n\n### 冷热数据\n因为redis强劲的性能，与leveldb互相配合，将冷热数据分开存储，互相交换数据，以达到冷热切换的目的。\n\n","slug":"20160714-cache-server-start-up","published":1,"updated":"2016-08-05T14:19:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32ruk000665s6elo13vd6","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>leveldb是一个Google开发的高性能的字符串类型的K-V存储C/C++类库，其详细介绍可参考<a href=\"https://github.com/google/leveldb\" target=\"_blank\" rel=\"external\">Github主页</a>，刚开始工作时使用过一段时间，用于存储爬虫系统爬取的大量网页数据。但是后来就一直没有使用过。<br>最近在做推荐时，发现user profile的数据实在太大，即使有类似于Redis集群1T的内存也没法将用户所有有数据cache下来，一直想着能不能做个冷热的备件系统加大对user profile数据存储数量，结合leveldb和redis。</p>\n<h3 id=\"leveldb的优势\"><a href=\"#leveldb的优势\" class=\"headerlink\" title=\"leveldb的优势\"></a>leveldb的优势</h3><p>LevelDB内部采用连续的块存储数据，充分发挥了顺序磁盘I/O的性能，并且运用了现代操作系统里的高性能缓冲区管理。这样的结构正好迎合了现代内存的层次式结构， 避免了与产生高性能的操作系统决策之间的冲突。</p>\n<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。<br>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。<br>从3.0版本开始，Redis支持数据的备份，即master-slave模式的数据备份。</p>\n<h3 id=\"冷热数据\"><a href=\"#冷热数据\" class=\"headerlink\" title=\"冷热数据\"></a>冷热数据</h3><p>因为redis强劲的性能，与leveldb互相配合，将冷热数据分开存储，互相交换数据，以达到冷热切换的目的。</p>\n","excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>leveldb是一个Google开发的高性能的字符串类型的K-V存储C/C++类库，其详细介绍可参考<a href=\"https://github.com/google/leveldb\">Github主页</a>，刚开始工作时使用过一段时间，用于存储爬虫系统爬取的大量网页数据。但是后来就一直没有使用过。<br>最近在做推荐时，发现user profile的数据实在太大，即使有类似于Redis集群1T的内存也没法将用户所有有数据cache下来，一直想着能不能做个冷热的备件系统加大对user profile数据存储数量，结合leveldb和redis。</p>\n<h3 id=\"leveldb的优势\"><a href=\"#leveldb的优势\" class=\"headerlink\" title=\"leveldb的优势\"></a>leveldb的优势</h3><p>LevelDB内部采用连续的块存储数据，充分发挥了顺序磁盘I/O的性能，并且运用了现代操作系统里的高性能缓冲区管理。这样的结构正好迎合了现代内存的层次式结构， 避免了与产生高性能的操作系统决策之间的冲突。</p>\n<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。<br>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。<br>从3.0版本开始，Redis支持数据的备份，即master-slave模式的数据备份。</p>\n<h3 id=\"冷热数据\"><a href=\"#冷热数据\" class=\"headerlink\" title=\"冷热数据\"></a>冷热数据</h3><p>因为redis强劲的性能，与leveldb互相配合，将冷热数据分开存储，互相交换数据，以达到冷热切换的目的。</p>\n"},{"title":"spark RDD 操作","date":"2016-08-04T12:06:29.000Z","_content":"\n# 2.1 Spark RDD操作\n\n## 2.1.1 RDD是什么？\n\n弹性分布式数据集RDD是Spark中的抽象数据结构类型，任何数据在Spark中都被表示为RDD。\n\n```scala\nabstract class RDD[T: ClassTag](\n    @transient private var _sc: SparkContext,\n    @transient private var deps: Seq[Dependency[_]]\n  ) extends Serializable with Logging \n```\nRDD还提供了一组丰富的操作来操作这些数据。在这些操作中，诸如map、flatMap、filter等转换操作实现了monad模式，很好地契合了Scala的集合操作。除此之外，RDD还提供了诸如join、groupBy、reduceByKey等更为方便的操作（注意，reduceByKey是action，而非transformation），以支持常见的数据运算。RDD可以简单看成是一个数组。和普通数组的区别是，RDD中的数据是分区存储的，这样不同分区的数据就可以分布在不同的机器上，同时可以被并行处理。因此，Spark应用程序所做的就是把需要处理的数据转换为RDD，然后对RDD进行一系列的变换和操作从而得到结果。RDD的接口只支持粗粒度的操作，一个操作会被应用到RDD上所有的数据上。\n\n## 2.1.2 RDD基本转换操作\n\n- map操作将RDD中类型为T的元素一对一的映射为类型为U的元素\n\n```scala\ndef map[U: ClassTag](f: T => U): RDD[U] = withScope {\n  val cleanF = sc.clean(f)\n  new MapPartitionsRDD[U, T](this, (context, pid, iter) => iter.map(cleanF))\n}\n```\n举例\n\n```shell\nscala> var rdd = sc.makeRDD(1 to 5, 1)\nrdd: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[1] at makeRDD at <console>:21\nscala> rdd.collect()\nres2: Array[Int] = Array(1, 2, 3, 4, 5)\nscala> val mapRDD = rdd.map(x => x.toFloat)\nmapRDD: org.apache.spark.rdd.RDD[Float] = MapPartitionsRDD[2] at map at <console>:23\nscala> mapRDD.collect()\nres3: Array[Float] = Array(1.0, 2.0, 3.0, 4.0, 5.0)\n```\n\n- distinct操作返回RDD中所有不一样的元素\n\n```scala\ndef distinct(numPartitions: Int)(implicit ord: Ordering[T] = null): RDD[T] = withScope {\n  map(x => (x, null)).reduceByKey((x, y) => x, numPartitions).map(_._1)\n}\n```\n\n- flatMap操作将RDD中每一个元素进行一对多转换\n\n```scala\ndef flatMap[U: ClassTag](f: T => TraversableOnce[U]): RDD[U] = withScope {\n  val cleanF = sc.clean(f)\n  new MapPartitionsRDD[U, T](this, (context, pid, iter) => iter.flatMap(cleanF))\n}\n```\n  举例\n```shell\nscala> val flatMapRDD = rdd.flatMap(x => 1 to x)\nflatMapRDD: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[3] at flatMap at <console>:23\nscala> flatMapRDD.collect()\nres4: Array[Int] = Array(1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5)\n```\n\n- filter操作对RDD中的元素进行过滤\n\n```scala\ndef filter(f: T => Boolean): RDD[T] = withScope {\n  val cleanF = sc.clean(f)\n  new MapPartitionsRDD[T, T](\n    this,\n    (context, pid, iter) => iter.filter(cleanF),\n    preservesPartitioning = true)\n}\n```\n\n## 2.1.3 键值RDD转换操作\n\n- combineByKey、foldByKey、reduceByKey、groupByKey这四种操作类型，都是针对RDD[K, V]进行，最终会归结为combineByKey的操作上。\n  combineByKey的内部实现分成三部分来完成：\n\n1. 首先，根据是否需要在map端进行combine操作决定是否对RDD进行一次mapPartitions操作，从而减少shuffle的数据量。\n\n2. 第2步根据partitioner函数对MapPartitionsRDD进行shuffle操作。\n\n3. 最后对suffle的结果进行combine操作。\n\n\n- join、leftOuterJoin、rightOuterJoin针对RDD[K, V]中K值相等的连接操作，最终归结为cogroup来实现。\n\n```scala\ndef cogroup[W](other: RDD[(K, W)], partitioner: Partitioner)\n    : RDD[(K, (Iterable[V], Iterable[W]))] = self.withScope {\n  if (partitioner.isInstanceOf[HashPartitioner] && keyClass.isArray) {\n    throw new SparkException(\"Default partitioner cannot partition array keys.\")\n  }\n  val cg = new CoGroupedRDD[K](Seq(self, other), partitioner)\n  cg.mapValues { case Array(vs, w1s) =>\n    (vs.asInstanceOf[Iterable[V]], w1s.asInstanceOf[Iterable[W]])\n  }\n}\n```\n\n一个join操作会产生CoGroupRDD、MapValuesRDD、FlatMapValuesRDD三个RDD。\n\n```scala\ndef join[W](other: RDD[(K, W)], partitioner: Partitioner): RDD[(K, (V, W))] = self.withScope {\n  this.cogroup(other, partitioner).flatMapValues( pair =>\n    for (v <- pair._1.iterator; w <- pair._2.iterator) yield (v, w)\n  )\n}\n```\n\n## 2.1.4 RDD依赖关系\n\n因为RDD操作是粗粒度的，每一个转换操作都会产生一个新有RDD，所以前后的RDD就会形成前后依赖关系。Spark中有两种依赖类型，窄依赖（Narrow Dependenceis）和宽依赖（Wide Dependencies）。\n\n- 窄依赖，每一个父RDD的分区最多只被子RDD的一个分区所依赖，map、filter、union操作就会形成一个窄依赖\n\n- 宽依赖，多个子RDD的分区会依赖于同一个父RDD的分区。两个RDD数据集之间进行join操作就会形成宽依赖。\n\n\n## 2.1.5 使用Spark实现PageRank算法\n\nPageRank，网页排名，又称网页级别、Google左侧排名或佩奇排名，是一种由搜索引擎根据网页之间相互的超链接计算的技术，而作为网页排名的要素之一，以Google公司创办人拉里·佩奇（Larry Page）之姓来命名。Google用它来体现网页的相关性和重要性，在搜索引擎优化操作中是经常被用来评估网页优化的成效因素之一。\n\nPageRank通过网络浩瀚的超链接关系来确定一个页面的等级。Google把从A页面到B页面的链接解释为A页面给B页面投票，Google根据投票来源（甚至来源的来源，即链接到A页面的页面）和投票目标的等级来决定新的等级。简单的说，一个高等级的页面可以使其他低等级页面的等级提升。[来源[维基百科](https://zh.wikipedia.org/wiki/PageRank)]\n\n其算法原理如下：\n\n1. 通过链接关系将网页构建成Web图，每个页面设置相同的PageRank值，初始一般为1。\n2. 将每一个网页的权重贡献发送给相邻的网页，权重贡献=权重/指向的URL个数\n3. 对天每一个网页，将收到的权重贡献相加记为contribs，重新计算权重rank=0.15 + contribs*0.85\n4. 迭代1、2、3，直到收敛。\n\n利用Spark的各种操作方法，可以方便的实现PageRank算法，实现如下：\n\n```scala\nval MAX_ITERATION = 20\nval links = sc.parallelize(Array(('A', Array('D')), ('B', Array('A')), ('C', Array('A', 'B')), ('D', Array('A', 'C'))), 2).map(x => (x._1,x._2)).cache()\nvar ranks = sc.parallelize(Array(('A', 1.0), ('B', 1.0), ('C', 1.0), ('D', 1.0)), 2)\nfor (i <- 1 to MAX_ITERATION) {\n  val contribs = links.join(ranks, 2).flatMap {\n    case (url, (links, rank)) => links.map(dest => (dest, rank/links.size))\n  }\n  ranks = contribs.reduceByKey(_ + _, 2).mapValues(0.15 + 0.85 * _)\n}\nranks.collect()\n```\n\n最终结果：\n\n```shell\nres15: Array[(Char, Double)] = Array((B,0.4613200524321036), (D,1.3705281840649928), (A,1.4357617405523626), (C,0.7323900229505396))\n```\n\n","source":"_posts/20160804-spark-rdd.md","raw":"---\ntitle: spark RDD 操作\ndate: 2016-08-04 20:06:29\ntags:\n  - Spark\ncategories:\n  - Spark\n---\n\n# 2.1 Spark RDD操作\n\n## 2.1.1 RDD是什么？\n\n弹性分布式数据集RDD是Spark中的抽象数据结构类型，任何数据在Spark中都被表示为RDD。\n\n```scala\nabstract class RDD[T: ClassTag](\n    @transient private var _sc: SparkContext,\n    @transient private var deps: Seq[Dependency[_]]\n  ) extends Serializable with Logging \n```\nRDD还提供了一组丰富的操作来操作这些数据。在这些操作中，诸如map、flatMap、filter等转换操作实现了monad模式，很好地契合了Scala的集合操作。除此之外，RDD还提供了诸如join、groupBy、reduceByKey等更为方便的操作（注意，reduceByKey是action，而非transformation），以支持常见的数据运算。RDD可以简单看成是一个数组。和普通数组的区别是，RDD中的数据是分区存储的，这样不同分区的数据就可以分布在不同的机器上，同时可以被并行处理。因此，Spark应用程序所做的就是把需要处理的数据转换为RDD，然后对RDD进行一系列的变换和操作从而得到结果。RDD的接口只支持粗粒度的操作，一个操作会被应用到RDD上所有的数据上。\n\n## 2.1.2 RDD基本转换操作\n\n- map操作将RDD中类型为T的元素一对一的映射为类型为U的元素\n\n```scala\ndef map[U: ClassTag](f: T => U): RDD[U] = withScope {\n  val cleanF = sc.clean(f)\n  new MapPartitionsRDD[U, T](this, (context, pid, iter) => iter.map(cleanF))\n}\n```\n举例\n\n```shell\nscala> var rdd = sc.makeRDD(1 to 5, 1)\nrdd: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[1] at makeRDD at <console>:21\nscala> rdd.collect()\nres2: Array[Int] = Array(1, 2, 3, 4, 5)\nscala> val mapRDD = rdd.map(x => x.toFloat)\nmapRDD: org.apache.spark.rdd.RDD[Float] = MapPartitionsRDD[2] at map at <console>:23\nscala> mapRDD.collect()\nres3: Array[Float] = Array(1.0, 2.0, 3.0, 4.0, 5.0)\n```\n\n- distinct操作返回RDD中所有不一样的元素\n\n```scala\ndef distinct(numPartitions: Int)(implicit ord: Ordering[T] = null): RDD[T] = withScope {\n  map(x => (x, null)).reduceByKey((x, y) => x, numPartitions).map(_._1)\n}\n```\n\n- flatMap操作将RDD中每一个元素进行一对多转换\n\n```scala\ndef flatMap[U: ClassTag](f: T => TraversableOnce[U]): RDD[U] = withScope {\n  val cleanF = sc.clean(f)\n  new MapPartitionsRDD[U, T](this, (context, pid, iter) => iter.flatMap(cleanF))\n}\n```\n  举例\n```shell\nscala> val flatMapRDD = rdd.flatMap(x => 1 to x)\nflatMapRDD: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[3] at flatMap at <console>:23\nscala> flatMapRDD.collect()\nres4: Array[Int] = Array(1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5)\n```\n\n- filter操作对RDD中的元素进行过滤\n\n```scala\ndef filter(f: T => Boolean): RDD[T] = withScope {\n  val cleanF = sc.clean(f)\n  new MapPartitionsRDD[T, T](\n    this,\n    (context, pid, iter) => iter.filter(cleanF),\n    preservesPartitioning = true)\n}\n```\n\n## 2.1.3 键值RDD转换操作\n\n- combineByKey、foldByKey、reduceByKey、groupByKey这四种操作类型，都是针对RDD[K, V]进行，最终会归结为combineByKey的操作上。\n  combineByKey的内部实现分成三部分来完成：\n\n1. 首先，根据是否需要在map端进行combine操作决定是否对RDD进行一次mapPartitions操作，从而减少shuffle的数据量。\n\n2. 第2步根据partitioner函数对MapPartitionsRDD进行shuffle操作。\n\n3. 最后对suffle的结果进行combine操作。\n\n\n- join、leftOuterJoin、rightOuterJoin针对RDD[K, V]中K值相等的连接操作，最终归结为cogroup来实现。\n\n```scala\ndef cogroup[W](other: RDD[(K, W)], partitioner: Partitioner)\n    : RDD[(K, (Iterable[V], Iterable[W]))] = self.withScope {\n  if (partitioner.isInstanceOf[HashPartitioner] && keyClass.isArray) {\n    throw new SparkException(\"Default partitioner cannot partition array keys.\")\n  }\n  val cg = new CoGroupedRDD[K](Seq(self, other), partitioner)\n  cg.mapValues { case Array(vs, w1s) =>\n    (vs.asInstanceOf[Iterable[V]], w1s.asInstanceOf[Iterable[W]])\n  }\n}\n```\n\n一个join操作会产生CoGroupRDD、MapValuesRDD、FlatMapValuesRDD三个RDD。\n\n```scala\ndef join[W](other: RDD[(K, W)], partitioner: Partitioner): RDD[(K, (V, W))] = self.withScope {\n  this.cogroup(other, partitioner).flatMapValues( pair =>\n    for (v <- pair._1.iterator; w <- pair._2.iterator) yield (v, w)\n  )\n}\n```\n\n## 2.1.4 RDD依赖关系\n\n因为RDD操作是粗粒度的，每一个转换操作都会产生一个新有RDD，所以前后的RDD就会形成前后依赖关系。Spark中有两种依赖类型，窄依赖（Narrow Dependenceis）和宽依赖（Wide Dependencies）。\n\n- 窄依赖，每一个父RDD的分区最多只被子RDD的一个分区所依赖，map、filter、union操作就会形成一个窄依赖\n\n- 宽依赖，多个子RDD的分区会依赖于同一个父RDD的分区。两个RDD数据集之间进行join操作就会形成宽依赖。\n\n\n## 2.1.5 使用Spark实现PageRank算法\n\nPageRank，网页排名，又称网页级别、Google左侧排名或佩奇排名，是一种由搜索引擎根据网页之间相互的超链接计算的技术，而作为网页排名的要素之一，以Google公司创办人拉里·佩奇（Larry Page）之姓来命名。Google用它来体现网页的相关性和重要性，在搜索引擎优化操作中是经常被用来评估网页优化的成效因素之一。\n\nPageRank通过网络浩瀚的超链接关系来确定一个页面的等级。Google把从A页面到B页面的链接解释为A页面给B页面投票，Google根据投票来源（甚至来源的来源，即链接到A页面的页面）和投票目标的等级来决定新的等级。简单的说，一个高等级的页面可以使其他低等级页面的等级提升。[来源[维基百科](https://zh.wikipedia.org/wiki/PageRank)]\n\n其算法原理如下：\n\n1. 通过链接关系将网页构建成Web图，每个页面设置相同的PageRank值，初始一般为1。\n2. 将每一个网页的权重贡献发送给相邻的网页，权重贡献=权重/指向的URL个数\n3. 对天每一个网页，将收到的权重贡献相加记为contribs，重新计算权重rank=0.15 + contribs*0.85\n4. 迭代1、2、3，直到收敛。\n\n利用Spark的各种操作方法，可以方便的实现PageRank算法，实现如下：\n\n```scala\nval MAX_ITERATION = 20\nval links = sc.parallelize(Array(('A', Array('D')), ('B', Array('A')), ('C', Array('A', 'B')), ('D', Array('A', 'C'))), 2).map(x => (x._1,x._2)).cache()\nvar ranks = sc.parallelize(Array(('A', 1.0), ('B', 1.0), ('C', 1.0), ('D', 1.0)), 2)\nfor (i <- 1 to MAX_ITERATION) {\n  val contribs = links.join(ranks, 2).flatMap {\n    case (url, (links, rank)) => links.map(dest => (dest, rank/links.size))\n  }\n  ranks = contribs.reduceByKey(_ + _, 2).mapValues(0.15 + 0.85 * _)\n}\nranks.collect()\n```\n\n最终结果：\n\n```shell\nres15: Array[(Char, Double)] = Array((B,0.4613200524321036), (D,1.3705281840649928), (A,1.4357617405523626), (C,0.7323900229505396))\n```\n\n","slug":"20160804-spark-rdd","published":1,"updated":"2016-08-05T15:09:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32rum000765s6uqjl55z4","content":"<h1 id=\"2-1-Spark-RDD操作\"><a href=\"#2-1-Spark-RDD操作\" class=\"headerlink\" title=\"2.1 Spark RDD操作\"></a>2.1 Spark RDD操作</h1><h2 id=\"2-1-1-RDD是什么？\"><a href=\"#2-1-1-RDD是什么？\" class=\"headerlink\" title=\"2.1.1 RDD是什么？\"></a>2.1.1 RDD是什么？</h2><p>弹性分布式数据集RDD是Spark中的抽象数据结构类型，任何数据在Spark中都被表示为RDD。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RDD</span>[<span class=\"type\">T</span>: <span class=\"type\">ClassTag</span>](<span class=\"params\"></span></span></div><div class=\"line\">    @transient private var _sc: <span class=\"type\">SparkContext</span>,</div><div class=\"line\">    @transient private var deps: <span class=\"type\">Seq</span>[<span class=\"type\">Dependency</span>[_]]</div><div class=\"line\">  ) <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span> <span class=\"keyword\">with</span> <span class=\"title\">Logging</span></div></pre></td></tr></table></figure>\n<p>RDD还提供了一组丰富的操作来操作这些数据。在这些操作中，诸如map、flatMap、filter等转换操作实现了monad模式，很好地契合了Scala的集合操作。除此之外，RDD还提供了诸如join、groupBy、reduceByKey等更为方便的操作（注意，reduceByKey是action，而非transformation），以支持常见的数据运算。RDD可以简单看成是一个数组。和普通数组的区别是，RDD中的数据是分区存储的，这样不同分区的数据就可以分布在不同的机器上，同时可以被并行处理。因此，Spark应用程序所做的就是把需要处理的数据转换为RDD，然后对RDD进行一系列的变换和操作从而得到结果。RDD的接口只支持粗粒度的操作，一个操作会被应用到RDD上所有的数据上。</p>\n<h2 id=\"2-1-2-RDD基本转换操作\"><a href=\"#2-1-2-RDD基本转换操作\" class=\"headerlink\" title=\"2.1.2 RDD基本转换操作\"></a>2.1.2 RDD基本转换操作</h2><ul>\n<li>map操作将RDD中类型为T的元素一对一的映射为类型为U的元素</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">map</span></span>[<span class=\"type\">U</span>: <span class=\"type\">ClassTag</span>](f: <span class=\"type\">T</span> =&gt; <span class=\"type\">U</span>): <span class=\"type\">RDD</span>[<span class=\"type\">U</span>] = withScope &#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> cleanF = sc.clean(f)</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"type\">MapPartitionsRDD</span>[<span class=\"type\">U</span>, <span class=\"type\">T</span>](<span class=\"keyword\">this</span>, (context, pid, iter) =&gt; iter.map(cleanF))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>举例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; var rdd = sc.makeRDD(1 to 5, 1)</div><div class=\"line\">rdd: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[1] at makeRDD at &lt;console&gt;:21</div><div class=\"line\">scala&gt; rdd.collect()</div><div class=\"line\">res2: Array[Int] = Array(1, 2, 3, 4, 5)</div><div class=\"line\">scala&gt; val mapRDD = rdd.map(x =&gt; x.toFloat)</div><div class=\"line\">mapRDD: org.apache.spark.rdd.RDD[Float] = MapPartitionsRDD[2] at map at &lt;console&gt;:23</div><div class=\"line\">scala&gt; mapRDD.collect()</div><div class=\"line\">res3: Array[Float] = Array(1.0, 2.0, 3.0, 4.0, 5.0)</div></pre></td></tr></table></figure>\n<ul>\n<li>distinct操作返回RDD中所有不一样的元素</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">distinct</span></span>(numPartitions: <span class=\"type\">Int</span>)(<span class=\"keyword\">implicit</span> ord: <span class=\"type\">Ordering</span>[<span class=\"type\">T</span>] = <span class=\"literal\">null</span>): <span class=\"type\">RDD</span>[<span class=\"type\">T</span>] = withScope &#123;</div><div class=\"line\">  map(x =&gt; (x, <span class=\"literal\">null</span>)).reduceByKey((x, y) =&gt; x, numPartitions).map(_._1)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>flatMap操作将RDD中每一个元素进行一对多转换</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flatMap</span></span>[<span class=\"type\">U</span>: <span class=\"type\">ClassTag</span>](f: <span class=\"type\">T</span> =&gt; <span class=\"type\">TraversableOnce</span>[<span class=\"type\">U</span>]): <span class=\"type\">RDD</span>[<span class=\"type\">U</span>] = withScope &#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> cleanF = sc.clean(f)</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"type\">MapPartitionsRDD</span>[<span class=\"type\">U</span>, <span class=\"type\">T</span>](<span class=\"keyword\">this</span>, (context, pid, iter) =&gt; iter.flatMap(cleanF))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; val flatMapRDD = rdd.flatMap(x =&gt; 1 to x)</div><div class=\"line\">flatMapRDD: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[3] at flatMap at &lt;console&gt;:23</div><div class=\"line\">scala&gt; flatMapRDD.collect()</div><div class=\"line\">res4: Array[Int] = Array(1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5)</div></pre></td></tr></table></figure></p>\n<ul>\n<li>filter操作对RDD中的元素进行过滤</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter</span></span>(f: <span class=\"type\">T</span> =&gt; <span class=\"type\">Boolean</span>): <span class=\"type\">RDD</span>[<span class=\"type\">T</span>] = withScope &#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> cleanF = sc.clean(f)</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"type\">MapPartitionsRDD</span>[<span class=\"type\">T</span>, <span class=\"type\">T</span>](</div><div class=\"line\">    <span class=\"keyword\">this</span>,</div><div class=\"line\">    (context, pid, iter) =&gt; iter.filter(cleanF),</div><div class=\"line\">    preservesPartitioning = <span class=\"literal\">true</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-1-3-键值RDD转换操作\"><a href=\"#2-1-3-键值RDD转换操作\" class=\"headerlink\" title=\"2.1.3 键值RDD转换操作\"></a>2.1.3 键值RDD转换操作</h2><ul>\n<li>combineByKey、foldByKey、reduceByKey、groupByKey这四种操作类型，都是针对RDD[K, V]进行，最终会归结为combineByKey的操作上。<br>combineByKey的内部实现分成三部分来完成：</li>\n</ul>\n<ol>\n<li><p>首先，根据是否需要在map端进行combine操作决定是否对RDD进行一次mapPartitions操作，从而减少shuffle的数据量。</p>\n</li>\n<li><p>第2步根据partitioner函数对MapPartitionsRDD进行shuffle操作。</p>\n</li>\n<li><p>最后对suffle的结果进行combine操作。</p>\n</li>\n</ol>\n<ul>\n<li>join、leftOuterJoin、rightOuterJoin针对RDD[K, V]中K值相等的连接操作，最终归结为cogroup来实现。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cogroup</span></span>[<span class=\"type\">W</span>](other: <span class=\"type\">RDD</span>[(<span class=\"type\">K</span>, <span class=\"type\">W</span>)], partitioner: <span class=\"type\">Partitioner</span>)</div><div class=\"line\">    : <span class=\"type\">RDD</span>[(<span class=\"type\">K</span>, (<span class=\"type\">Iterable</span>[<span class=\"type\">V</span>], <span class=\"type\">Iterable</span>[<span class=\"type\">W</span>]))] = self.withScope &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (partitioner.isInstanceOf[<span class=\"type\">HashPartitioner</span>] &amp;&amp; keyClass.isArray) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">SparkException</span>(<span class=\"string\">\"Default partitioner cannot partition array keys.\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">val</span> cg = <span class=\"keyword\">new</span> <span class=\"type\">CoGroupedRDD</span>[<span class=\"type\">K</span>](<span class=\"type\">Seq</span>(self, other), partitioner)</div><div class=\"line\">  cg.mapValues &#123; <span class=\"keyword\">case</span> <span class=\"type\">Array</span>(vs, w1s) =&gt;</div><div class=\"line\">    (vs.asInstanceOf[<span class=\"type\">Iterable</span>[<span class=\"type\">V</span>]], w1s.asInstanceOf[<span class=\"type\">Iterable</span>[<span class=\"type\">W</span>]])</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一个join操作会产生CoGroupRDD、MapValuesRDD、FlatMapValuesRDD三个RDD。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">join</span></span>[<span class=\"type\">W</span>](other: <span class=\"type\">RDD</span>[(<span class=\"type\">K</span>, <span class=\"type\">W</span>)], partitioner: <span class=\"type\">Partitioner</span>): <span class=\"type\">RDD</span>[(<span class=\"type\">K</span>, (<span class=\"type\">V</span>, <span class=\"type\">W</span>))] = self.withScope &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.cogroup(other, partitioner).flatMapValues( pair =&gt;</div><div class=\"line\">    <span class=\"keyword\">for</span> (v &lt;- pair._1.iterator; w &lt;- pair._2.iterator) <span class=\"keyword\">yield</span> (v, w)</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-1-4-RDD依赖关系\"><a href=\"#2-1-4-RDD依赖关系\" class=\"headerlink\" title=\"2.1.4 RDD依赖关系\"></a>2.1.4 RDD依赖关系</h2><p>因为RDD操作是粗粒度的，每一个转换操作都会产生一个新有RDD，所以前后的RDD就会形成前后依赖关系。Spark中有两种依赖类型，窄依赖（Narrow Dependenceis）和宽依赖（Wide Dependencies）。</p>\n<ul>\n<li><p>窄依赖，每一个父RDD的分区最多只被子RDD的一个分区所依赖，map、filter、union操作就会形成一个窄依赖</p>\n</li>\n<li><p>宽依赖，多个子RDD的分区会依赖于同一个父RDD的分区。两个RDD数据集之间进行join操作就会形成宽依赖。</p>\n</li>\n</ul>\n<h2 id=\"2-1-5-使用Spark实现PageRank算法\"><a href=\"#2-1-5-使用Spark实现PageRank算法\" class=\"headerlink\" title=\"2.1.5 使用Spark实现PageRank算法\"></a>2.1.5 使用Spark实现PageRank算法</h2><p>PageRank，网页排名，又称网页级别、Google左侧排名或佩奇排名，是一种由搜索引擎根据网页之间相互的超链接计算的技术，而作为网页排名的要素之一，以Google公司创办人拉里·佩奇（Larry Page）之姓来命名。Google用它来体现网页的相关性和重要性，在搜索引擎优化操作中是经常被用来评估网页优化的成效因素之一。</p>\n<p>PageRank通过网络浩瀚的超链接关系来确定一个页面的等级。Google把从A页面到B页面的链接解释为A页面给B页面投票，Google根据投票来源（甚至来源的来源，即链接到A页面的页面）和投票目标的等级来决定新的等级。简单的说，一个高等级的页面可以使其他低等级页面的等级提升。[来源<a href=\"https://zh.wikipedia.org/wiki/PageRank\" target=\"_blank\" rel=\"external\">维基百科</a>]</p>\n<p>其算法原理如下：</p>\n<ol>\n<li>通过链接关系将网页构建成Web图，每个页面设置相同的PageRank值，初始一般为1。</li>\n<li>将每一个网页的权重贡献发送给相邻的网页，权重贡献=权重/指向的URL个数</li>\n<li>对天每一个网页，将收到的权重贡献相加记为contribs，重新计算权重rank=0.15 + contribs*0.85</li>\n<li>迭代1、2、3，直到收敛。</li>\n</ol>\n<p>利用Spark的各种操作方法，可以方便的实现PageRank算法，实现如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> <span class=\"type\">MAX_ITERATION</span> = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"keyword\">val</span> links = sc.parallelize(<span class=\"type\">Array</span>(('<span class=\"type\">A</span>', <span class=\"type\">Array</span>('<span class=\"type\">D</span>')), ('<span class=\"type\">B</span>', <span class=\"type\">Array</span>('<span class=\"type\">A</span>')), ('<span class=\"type\">C</span>', <span class=\"type\">Array</span>('<span class=\"type\">A</span>', '<span class=\"type\">B</span>')), ('<span class=\"type\">D</span>', <span class=\"type\">Array</span>('<span class=\"type\">A</span>', '<span class=\"type\">C</span>'))), <span class=\"number\">2</span>).map(x =&gt; (x._1,x._2)).cache()</div><div class=\"line\"><span class=\"keyword\">var</span> ranks = sc.parallelize(<span class=\"type\">Array</span>(('<span class=\"type\">A</span>', <span class=\"number\">1.0</span>), ('<span class=\"type\">B</span>', <span class=\"number\">1.0</span>), ('<span class=\"type\">C</span>', <span class=\"number\">1.0</span>), ('<span class=\"type\">D</span>', <span class=\"number\">1.0</span>)), <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"type\">MAX_ITERATION</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> contribs = links.join(ranks, <span class=\"number\">2</span>).flatMap &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> (url, (links, rank)) =&gt; links.map(dest =&gt; (dest, rank/links.size))</div><div class=\"line\">  &#125;</div><div class=\"line\">  ranks = contribs.reduceByKey(_ + _, <span class=\"number\">2</span>).mapValues(<span class=\"number\">0.15</span> + <span class=\"number\">0.85</span> * _)</div><div class=\"line\">&#125;</div><div class=\"line\">ranks.collect()</div></pre></td></tr></table></figure>\n<p>最终结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">res15: Array[(Char, Double)] = Array((B,0.4613200524321036), (D,1.3705281840649928), (A,1.4357617405523626), (C,0.7323900229505396))</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"2-1-Spark-RDD操作\"><a href=\"#2-1-Spark-RDD操作\" class=\"headerlink\" title=\"2.1 Spark RDD操作\"></a>2.1 Spark RDD操作</h1><h2 id=\"2-1-1-RDD是什么？\"><a href=\"#2-1-1-RDD是什么？\" class=\"headerlink\" title=\"2.1.1 RDD是什么？\"></a>2.1.1 RDD是什么？</h2><p>弹性分布式数据集RDD是Spark中的抽象数据结构类型，任何数据在Spark中都被表示为RDD。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RDD</span>[<span class=\"type\">T</span>: <span class=\"type\">ClassTag</span>](<span class=\"params\"></div><div class=\"line\">    @transient private var _sc: <span class=\"type\">SparkContext</span>,</div><div class=\"line\">    @transient private var deps: <span class=\"type\">Seq</span>[<span class=\"type\">Dependency</span>[_]]</div><div class=\"line\">  </span>) <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span> <span class=\"keyword\">with</span> <span class=\"title\">Logging</span></span></div></pre></td></tr></table></figure>\n<p>RDD还提供了一组丰富的操作来操作这些数据。在这些操作中，诸如map、flatMap、filter等转换操作实现了monad模式，很好地契合了Scala的集合操作。除此之外，RDD还提供了诸如join、groupBy、reduceByKey等更为方便的操作（注意，reduceByKey是action，而非transformation），以支持常见的数据运算。RDD可以简单看成是一个数组。和普通数组的区别是，RDD中的数据是分区存储的，这样不同分区的数据就可以分布在不同的机器上，同时可以被并行处理。因此，Spark应用程序所做的就是把需要处理的数据转换为RDD，然后对RDD进行一系列的变换和操作从而得到结果。RDD的接口只支持粗粒度的操作，一个操作会被应用到RDD上所有的数据上。</p>\n<h2 id=\"2-1-2-RDD基本转换操作\"><a href=\"#2-1-2-RDD基本转换操作\" class=\"headerlink\" title=\"2.1.2 RDD基本转换操作\"></a>2.1.2 RDD基本转换操作</h2><ul>\n<li>map操作将RDD中类型为T的元素一对一的映射为类型为U的元素</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">map</span></span>[<span class=\"type\">U</span>: <span class=\"type\">ClassTag</span>](f: <span class=\"type\">T</span> =&gt; <span class=\"type\">U</span>): <span class=\"type\">RDD</span>[<span class=\"type\">U</span>] = withScope &#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> cleanF = sc.clean(f)</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"type\">MapPartitionsRDD</span>[<span class=\"type\">U</span>, <span class=\"type\">T</span>](<span class=\"keyword\">this</span>, (context, pid, iter) =&gt; iter.map(cleanF))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>举例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; var rdd = sc.makeRDD(1 to 5, 1)</div><div class=\"line\">rdd: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[1] at makeRDD at &lt;console&gt;:21</div><div class=\"line\">scala&gt; rdd.collect()</div><div class=\"line\">res2: Array[Int] = Array(1, 2, 3, 4, 5)</div><div class=\"line\">scala&gt; val mapRDD = rdd.map(x =&gt; x.toFloat)</div><div class=\"line\">mapRDD: org.apache.spark.rdd.RDD[Float] = MapPartitionsRDD[2] at map at &lt;console&gt;:23</div><div class=\"line\">scala&gt; mapRDD.collect()</div><div class=\"line\">res3: Array[Float] = Array(1.0, 2.0, 3.0, 4.0, 5.0)</div></pre></td></tr></table></figure>\n<ul>\n<li>distinct操作返回RDD中所有不一样的元素</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">distinct</span></span>(numPartitions: <span class=\"type\">Int</span>)(<span class=\"keyword\">implicit</span> ord: <span class=\"type\">Ordering</span>[<span class=\"type\">T</span>] = <span class=\"literal\">null</span>): <span class=\"type\">RDD</span>[<span class=\"type\">T</span>] = withScope &#123;</div><div class=\"line\">  map(x =&gt; (x, <span class=\"literal\">null</span>)).reduceByKey((x, y) =&gt; x, numPartitions).map(_._1)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>flatMap操作将RDD中每一个元素进行一对多转换</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flatMap</span></span>[<span class=\"type\">U</span>: <span class=\"type\">ClassTag</span>](f: <span class=\"type\">T</span> =&gt; <span class=\"type\">TraversableOnce</span>[<span class=\"type\">U</span>]): <span class=\"type\">RDD</span>[<span class=\"type\">U</span>] = withScope &#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> cleanF = sc.clean(f)</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"type\">MapPartitionsRDD</span>[<span class=\"type\">U</span>, <span class=\"type\">T</span>](<span class=\"keyword\">this</span>, (context, pid, iter) =&gt; iter.flatMap(cleanF))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; val flatMapRDD = rdd.flatMap(x =&gt; 1 to x)</div><div class=\"line\">flatMapRDD: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[3] at flatMap at &lt;console&gt;:23</div><div class=\"line\">scala&gt; flatMapRDD.collect()</div><div class=\"line\">res4: Array[Int] = Array(1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5)</div></pre></td></tr></table></figure></p>\n<ul>\n<li>filter操作对RDD中的元素进行过滤</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter</span></span>(f: <span class=\"type\">T</span> =&gt; <span class=\"type\">Boolean</span>): <span class=\"type\">RDD</span>[<span class=\"type\">T</span>] = withScope &#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> cleanF = sc.clean(f)</div><div class=\"line\">  <span class=\"keyword\">new</span> <span class=\"type\">MapPartitionsRDD</span>[<span class=\"type\">T</span>, <span class=\"type\">T</span>](</div><div class=\"line\">    <span class=\"keyword\">this</span>,</div><div class=\"line\">    (context, pid, iter) =&gt; iter.filter(cleanF),</div><div class=\"line\">    preservesPartitioning = <span class=\"literal\">true</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-1-3-键值RDD转换操作\"><a href=\"#2-1-3-键值RDD转换操作\" class=\"headerlink\" title=\"2.1.3 键值RDD转换操作\"></a>2.1.3 键值RDD转换操作</h2><ul>\n<li>combineByKey、foldByKey、reduceByKey、groupByKey这四种操作类型，都是针对RDD[K, V]进行，最终会归结为combineByKey的操作上。<br>combineByKey的内部实现分成三部分来完成：</li>\n</ul>\n<ol>\n<li><p>首先，根据是否需要在map端进行combine操作决定是否对RDD进行一次mapPartitions操作，从而减少shuffle的数据量。</p>\n</li>\n<li><p>第2步根据partitioner函数对MapPartitionsRDD进行shuffle操作。</p>\n</li>\n<li><p>最后对suffle的结果进行combine操作。</p>\n</li>\n</ol>\n<ul>\n<li>join、leftOuterJoin、rightOuterJoin针对RDD[K, V]中K值相等的连接操作，最终归结为cogroup来实现。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cogroup</span></span>[<span class=\"type\">W</span>](other: <span class=\"type\">RDD</span>[(<span class=\"type\">K</span>, <span class=\"type\">W</span>)], partitioner: <span class=\"type\">Partitioner</span>)</div><div class=\"line\">    : <span class=\"type\">RDD</span>[(<span class=\"type\">K</span>, (<span class=\"type\">Iterable</span>[<span class=\"type\">V</span>], <span class=\"type\">Iterable</span>[<span class=\"type\">W</span>]))] = self.withScope &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (partitioner.isInstanceOf[<span class=\"type\">HashPartitioner</span>] &amp;&amp; keyClass.isArray) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">SparkException</span>(<span class=\"string\">\"Default partitioner cannot partition array keys.\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">val</span> cg = <span class=\"keyword\">new</span> <span class=\"type\">CoGroupedRDD</span>[<span class=\"type\">K</span>](<span class=\"type\">Seq</span>(self, other), partitioner)</div><div class=\"line\">  cg.mapValues &#123; <span class=\"keyword\">case</span> <span class=\"type\">Array</span>(vs, w1s) =&gt;</div><div class=\"line\">    (vs.asInstanceOf[<span class=\"type\">Iterable</span>[<span class=\"type\">V</span>]], w1s.asInstanceOf[<span class=\"type\">Iterable</span>[<span class=\"type\">W</span>]])</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一个join操作会产生CoGroupRDD、MapValuesRDD、FlatMapValuesRDD三个RDD。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">join</span></span>[<span class=\"type\">W</span>](other: <span class=\"type\">RDD</span>[(<span class=\"type\">K</span>, <span class=\"type\">W</span>)], partitioner: <span class=\"type\">Partitioner</span>): <span class=\"type\">RDD</span>[(<span class=\"type\">K</span>, (<span class=\"type\">V</span>, <span class=\"type\">W</span>))] = self.withScope &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.cogroup(other, partitioner).flatMapValues( pair =&gt;</div><div class=\"line\">    <span class=\"keyword\">for</span> (v &lt;- pair._1.iterator; w &lt;- pair._2.iterator) <span class=\"keyword\">yield</span> (v, w)</div><div class=\"line\">  )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-1-4-RDD依赖关系\"><a href=\"#2-1-4-RDD依赖关系\" class=\"headerlink\" title=\"2.1.4 RDD依赖关系\"></a>2.1.4 RDD依赖关系</h2><p>因为RDD操作是粗粒度的，每一个转换操作都会产生一个新有RDD，所以前后的RDD就会形成前后依赖关系。Spark中有两种依赖类型，窄依赖（Narrow Dependenceis）和宽依赖（Wide Dependencies）。</p>\n<ul>\n<li><p>窄依赖，每一个父RDD的分区最多只被子RDD的一个分区所依赖，map、filter、union操作就会形成一个窄依赖</p>\n</li>\n<li><p>宽依赖，多个子RDD的分区会依赖于同一个父RDD的分区。两个RDD数据集之间进行join操作就会形成宽依赖。</p>\n</li>\n</ul>\n<h2 id=\"2-1-5-使用Spark实现PageRank算法\"><a href=\"#2-1-5-使用Spark实现PageRank算法\" class=\"headerlink\" title=\"2.1.5 使用Spark实现PageRank算法\"></a>2.1.5 使用Spark实现PageRank算法</h2><p>PageRank，网页排名，又称网页级别、Google左侧排名或佩奇排名，是一种由搜索引擎根据网页之间相互的超链接计算的技术，而作为网页排名的要素之一，以Google公司创办人拉里·佩奇（Larry Page）之姓来命名。Google用它来体现网页的相关性和重要性，在搜索引擎优化操作中是经常被用来评估网页优化的成效因素之一。</p>\n<p>PageRank通过网络浩瀚的超链接关系来确定一个页面的等级。Google把从A页面到B页面的链接解释为A页面给B页面投票，Google根据投票来源（甚至来源的来源，即链接到A页面的页面）和投票目标的等级来决定新的等级。简单的说，一个高等级的页面可以使其他低等级页面的等级提升。[来源<a href=\"https://zh.wikipedia.org/wiki/PageRank\">维基百科</a>]</p>\n<p>其算法原理如下：</p>\n<ol>\n<li>通过链接关系将网页构建成Web图，每个页面设置相同的PageRank值，初始一般为1。</li>\n<li>将每一个网页的权重贡献发送给相邻的网页，权重贡献=权重/指向的URL个数</li>\n<li>对天每一个网页，将收到的权重贡献相加记为contribs，重新计算权重rank=0.15 + contribs*0.85</li>\n<li>迭代1、2、3，直到收敛。</li>\n</ol>\n<p>利用Spark的各种操作方法，可以方便的实现PageRank算法，实现如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> <span class=\"type\">MAX_ITERATION</span> = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"keyword\">val</span> links = sc.parallelize(<span class=\"type\">Array</span>(('<span class=\"type\">A</span>', <span class=\"type\">Array</span>('<span class=\"type\">D</span>')), ('<span class=\"type\">B</span>', <span class=\"type\">Array</span>('<span class=\"type\">A</span>')), ('<span class=\"type\">C</span>', <span class=\"type\">Array</span>('<span class=\"type\">A</span>', '<span class=\"type\">B</span>')), ('<span class=\"type\">D</span>', <span class=\"type\">Array</span>('<span class=\"type\">A</span>', '<span class=\"type\">C</span>'))), <span class=\"number\">2</span>).map(x =&gt; (x._1,x._2)).cache()</div><div class=\"line\"><span class=\"keyword\">var</span> ranks = sc.parallelize(<span class=\"type\">Array</span>(('<span class=\"type\">A</span>', <span class=\"number\">1.0</span>), ('<span class=\"type\">B</span>', <span class=\"number\">1.0</span>), ('<span class=\"type\">C</span>', <span class=\"number\">1.0</span>), ('<span class=\"type\">D</span>', <span class=\"number\">1.0</span>)), <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"type\">MAX_ITERATION</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> contribs = links.join(ranks, <span class=\"number\">2</span>).flatMap &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> (url, (links, rank)) =&gt; links.map(dest =&gt; (dest, rank/links.size))</div><div class=\"line\">  &#125;</div><div class=\"line\">  ranks = contribs.reduceByKey(_ + _, <span class=\"number\">2</span>).mapValues(<span class=\"number\">0.15</span> + <span class=\"number\">0.85</span> * _)</div><div class=\"line\">&#125;</div><div class=\"line\">ranks.collect()</div></pre></td></tr></table></figure>\n<p>最终结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">res15: Array[(Char, Double)] = Array((B,0.4613200524321036), (D,1.3705281840649928), (A,1.4357617405523626), (C,0.7323900229505396))</div></pre></td></tr></table></figure>\n"},{"title":"微信推荐系统","date":"2016-07-10T02:31:00.000Z","_content":"\n### 爬虫\n1. 正文抽取\n2. 主题抽取\n\n### 推荐引擎\n1. tag rank\n2. 协同过滤\n3. user profile\n\n### 客户端\n  1. iOS\n  2. Android\n","source":"_posts/20160710-build-recommendtion-system.md","raw":"---\ntitle:  微信推荐系统\ndate: 2016-07-10 10:31:00\ntags:\n  - 推荐系统\ncategory:\n  - github\n---\n\n### 爬虫\n1. 正文抽取\n2. 主题抽取\n\n### 推荐引擎\n1. tag rank\n2. 协同过滤\n3. user profile\n\n### 客户端\n  1. iOS\n  2. Android\n","slug":"20160710-build-recommendtion-system","published":1,"updated":"2016-08-05T14:19:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32run000965s6ancf2oaa","content":"<h3 id=\"爬虫\"><a href=\"#爬虫\" class=\"headerlink\" title=\"爬虫\"></a>爬虫</h3><ol>\n<li>正文抽取</li>\n<li>主题抽取</li>\n</ol>\n<h3 id=\"推荐引擎\"><a href=\"#推荐引擎\" class=\"headerlink\" title=\"推荐引擎\"></a>推荐引擎</h3><ol>\n<li>tag rank</li>\n<li>协同过滤</li>\n<li>user profile</li>\n</ol>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><ol>\n<li>iOS</li>\n<li>Android</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"爬虫\"><a href=\"#爬虫\" class=\"headerlink\" title=\"爬虫\"></a>爬虫</h3><ol>\n<li>正文抽取</li>\n<li>主题抽取</li>\n</ol>\n<h3 id=\"推荐引擎\"><a href=\"#推荐引擎\" class=\"headerlink\" title=\"推荐引擎\"></a>推荐引擎</h3><ol>\n<li>tag rank</li>\n<li>协同过滤</li>\n<li>user profile</li>\n</ol>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><ol>\n<li>iOS</li>\n<li>Android</li>\n</ol>\n"},{"title":"system log extract from chromium code","date":"2016-07-15T08:33:10.000Z","_content":"\nglog是Google的一个应用程序的日志库。它提供基于C++风格的流的日志API，以及各种辅助的宏。打印日志只需以流的形式传给 LOG(level) ，例如：\n```cpp\nVLOG(INFO) << \"File Path: \" << file_path;\n```\n","source":"_posts/20160715-system-log-extract-from-chromium-code.md","raw":"---\ntitle: system log extract from chromium code\ndate: 2016-07-15 16:33:10\ntags:\ncategories:\n---\n\nglog是Google的一个应用程序的日志库。它提供基于C++风格的流的日志API，以及各种辅助的宏。打印日志只需以流的形式传给 LOG(level) ，例如：\n```cpp\nVLOG(INFO) << \"File Path: \" << file_path;\n```\n","slug":"20160715-system-log-extract-from-chromium-code","published":1,"updated":"2016-08-05T14:19:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32ruu000c65s65l1zwjt1","content":"<p>glog是Google的一个应用程序的日志库。它提供基于C++风格的流的日志API，以及各种辅助的宏。打印日志只需以流的形式传给 LOG(level) ，例如：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">VLOG(INFO) &lt;&lt; <span class=\"string\">\"File Path: \"</span> &lt;&lt; file_path;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>glog是Google的一个应用程序的日志库。它提供基于C++风格的流的日志API，以及各种辅助的宏。打印日志只需以流的形式传给 LOG(level) ，例如：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">VLOG(INFO) &lt;&lt; <span class=\"string\">\"File Path: \"</span> &lt;&lt; file_path;</div></pre></td></tr></table></figure></p>\n"},{"title":"Spark MLlib 正则化","date":"2016-08-05T15:21:01.000Z","_content":"\n# 4.1 正则化\n\n正则化是为了约束训练过程，使其向生成简单模型的方向收敛，从而避免过拟合。MLlib目前支持下面的正则化方法：\n\n| 范数     |       作用          |\n|----------|---------------------|\n| L1       | 促进产生稀疏的权值  |\n| L2       |              平滑   |\n\n### MLlib正则化抽象类\n\n```scala\nabstract class Updater extends Serializable {\n  /**\n   * Compute an updated value for weights given the gradient, stepSize, iteration number and\n   * regularization parameter. Also returns the regularization value regParam * R(w)\n   * computed using the *updated* weights.\n   *\n   * @param weightsOld - Column matrix of size dx1 where d is the number of features.\n   * @param gradient - Column matrix of size dx1 where d is the number of features.\n   * @param stepSize - step size across iterations\n   * @param iter - Iteration number\n   * @param regParam - Regularization parameter\n   *\n   * @return A tuple of 2 elements. The first element is a column matrix containing updated weights,\n   *         and the second element is the regularization value computed using updated weights.\n   */\n  def compute(\n      weightsOld: Vector,\n      gradient: Vector,\n      stepSize: Double,\n      iter: Int,\n      regParam: Double): (Vector, Double)\n}\n```\n\n### L1范式\n\n```scala\n@DeveloperApi\nclass L1Updater extends Updater {\n  override def compute(\n      weightsOld: Vector,\n      gradient: Vector,\n      stepSize: Double,\n      iter: Int,\n      regParam: Double): (Vector, Double) = {\n    val thisIterStepSize = stepSize / math.sqrt(iter)\n    // Take gradient step\n    val brzWeights: BV[Double] = weightsOld.asBreeze.toDenseVector\n    brzAxpy(-thisIterStepSize, gradient.asBreeze, brzWeights)\n    // Apply proximal operator (soft thresholding)\n    val shrinkageVal = regParam * thisIterStepSize\n    var i = 0\n    val len = brzWeights.length\n    while (i < len) {\n      val wi = brzWeights(i)\n      brzWeights(i) = signum(wi) * max(0.0, abs(wi) - shrinkageVal)\n      i += 1\n    }\n\n    (Vectors.fromBreeze(brzWeights), brzNorm(brzWeights, 1.0) * regParam)\n  }\n}\n```\n\n### L2范式\n\n```scala\n@DeveloperApi\nclass SquaredL2Updater extends Updater {\n  override def compute(\n      weightsOld: Vector,\n      gradient: Vector,\n      stepSize: Double,\n      iter: Int,\n      regParam: Double): (Vector, Double) = {\n    // add up both updates from the gradient of the loss (= step) as well as\n    // the gradient of the regularizer (= regParam * weightsOld)\n    // w' = w - thisIterStepSize * (gradient + regParam * w)\n    // w' = (1 - thisIterStepSize * regParam) * w - thisIterStepSize * gradient\n    val thisIterStepSize = stepSize / math.sqrt(iter)\n    val brzWeights: BV[Double] = weightsOld.asBreeze.toDenseVector\n    brzWeights :*= (1.0 - thisIterStepSize * regParam)\n    brzAxpy(-thisIterStepSize, gradient.asBreeze, brzWeights)\n    val norm = brzNorm(brzWeights, 2.0)\n\n    (Vectors.fromBreeze(brzWeights), 0.5 * regParam * norm * norm)\n  }\n}\n```\n\n","source":"_posts/20160816-spark-mllib-regularizer.md","raw":"---\ntitle: Spark MLlib 正则化\ndate: 2016-08-05 23:21:01\ntags:\n - Spark\n - Spark MLlib\ncategories:\n - Spark\n---\n\n# 4.1 正则化\n\n正则化是为了约束训练过程，使其向生成简单模型的方向收敛，从而避免过拟合。MLlib目前支持下面的正则化方法：\n\n| 范数     |       作用          |\n|----------|---------------------|\n| L1       | 促进产生稀疏的权值  |\n| L2       |              平滑   |\n\n### MLlib正则化抽象类\n\n```scala\nabstract class Updater extends Serializable {\n  /**\n   * Compute an updated value for weights given the gradient, stepSize, iteration number and\n   * regularization parameter. Also returns the regularization value regParam * R(w)\n   * computed using the *updated* weights.\n   *\n   * @param weightsOld - Column matrix of size dx1 where d is the number of features.\n   * @param gradient - Column matrix of size dx1 where d is the number of features.\n   * @param stepSize - step size across iterations\n   * @param iter - Iteration number\n   * @param regParam - Regularization parameter\n   *\n   * @return A tuple of 2 elements. The first element is a column matrix containing updated weights,\n   *         and the second element is the regularization value computed using updated weights.\n   */\n  def compute(\n      weightsOld: Vector,\n      gradient: Vector,\n      stepSize: Double,\n      iter: Int,\n      regParam: Double): (Vector, Double)\n}\n```\n\n### L1范式\n\n```scala\n@DeveloperApi\nclass L1Updater extends Updater {\n  override def compute(\n      weightsOld: Vector,\n      gradient: Vector,\n      stepSize: Double,\n      iter: Int,\n      regParam: Double): (Vector, Double) = {\n    val thisIterStepSize = stepSize / math.sqrt(iter)\n    // Take gradient step\n    val brzWeights: BV[Double] = weightsOld.asBreeze.toDenseVector\n    brzAxpy(-thisIterStepSize, gradient.asBreeze, brzWeights)\n    // Apply proximal operator (soft thresholding)\n    val shrinkageVal = regParam * thisIterStepSize\n    var i = 0\n    val len = brzWeights.length\n    while (i < len) {\n      val wi = brzWeights(i)\n      brzWeights(i) = signum(wi) * max(0.0, abs(wi) - shrinkageVal)\n      i += 1\n    }\n\n    (Vectors.fromBreeze(brzWeights), brzNorm(brzWeights, 1.0) * regParam)\n  }\n}\n```\n\n### L2范式\n\n```scala\n@DeveloperApi\nclass SquaredL2Updater extends Updater {\n  override def compute(\n      weightsOld: Vector,\n      gradient: Vector,\n      stepSize: Double,\n      iter: Int,\n      regParam: Double): (Vector, Double) = {\n    // add up both updates from the gradient of the loss (= step) as well as\n    // the gradient of the regularizer (= regParam * weightsOld)\n    // w' = w - thisIterStepSize * (gradient + regParam * w)\n    // w' = (1 - thisIterStepSize * regParam) * w - thisIterStepSize * gradient\n    val thisIterStepSize = stepSize / math.sqrt(iter)\n    val brzWeights: BV[Double] = weightsOld.asBreeze.toDenseVector\n    brzWeights :*= (1.0 - thisIterStepSize * regParam)\n    brzAxpy(-thisIterStepSize, gradient.asBreeze, brzWeights)\n    val norm = brzNorm(brzWeights, 2.0)\n\n    (Vectors.fromBreeze(brzWeights), 0.5 * regParam * norm * norm)\n  }\n}\n```\n\n","slug":"20160816-spark-mllib-regularizer","published":1,"updated":"2016-08-06T16:09:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32ruz000f65s62eynskz0","content":"<h1 id=\"4-1-正则化\"><a href=\"#4-1-正则化\" class=\"headerlink\" title=\"4.1 正则化\"></a>4.1 正则化</h1><p>正则化是为了约束训练过程，使其向生成简单模型的方向收敛，从而避免过拟合。MLlib目前支持下面的正则化方法：</p>\n<table>\n<thead>\n<tr>\n<th>范数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>L1</td>\n<td>促进产生稀疏的权值</td>\n</tr>\n<tr>\n<td>L2</td>\n<td>平滑</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"MLlib正则化抽象类\"><a href=\"#MLlib正则化抽象类\" class=\"headerlink\" title=\"MLlib正则化抽象类\"></a>MLlib正则化抽象类</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Updater</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Compute an updated value for weights given the gradient, stepSize, iteration number and</div><div class=\"line\">   * regularization parameter. Also returns the regularization value regParam * R(w)</div><div class=\"line\">   * computed using the *updated* weights.</div><div class=\"line\">   *</div><div class=\"line\">   * @param weightsOld - Column matrix of size dx1 where d is the number of features.</div><div class=\"line\">   * @param gradient - Column matrix of size dx1 where d is the number of features.</div><div class=\"line\">   * @param stepSize - step size across iterations</div><div class=\"line\">   * @param iter - Iteration number</div><div class=\"line\">   * @param regParam - Regularization parameter</div><div class=\"line\">   *</div><div class=\"line\">   * @return A tuple of 2 elements. The first element is a column matrix containing updated weights,</div><div class=\"line\">   *         and the second element is the regularization value computed using updated weights.</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute</span></span>(</div><div class=\"line\">      weightsOld: <span class=\"type\">Vector</span>,</div><div class=\"line\">      gradient: <span class=\"type\">Vector</span>,</div><div class=\"line\">      stepSize: <span class=\"type\">Double</span>,</div><div class=\"line\">      iter: <span class=\"type\">Int</span>,</div><div class=\"line\">      regParam: <span class=\"type\">Double</span>): (<span class=\"type\">Vector</span>, <span class=\"type\">Double</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"L1范式\"><a href=\"#L1范式\" class=\"headerlink\" title=\"L1范式\"></a>L1范式</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DeveloperApi</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">L1Updater</span> <span class=\"keyword\">extends</span> <span class=\"title\">Updater</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute</span></span>(</div><div class=\"line\">      weightsOld: <span class=\"type\">Vector</span>,</div><div class=\"line\">      gradient: <span class=\"type\">Vector</span>,</div><div class=\"line\">      stepSize: <span class=\"type\">Double</span>,</div><div class=\"line\">      iter: <span class=\"type\">Int</span>,</div><div class=\"line\">      regParam: <span class=\"type\">Double</span>): (<span class=\"type\">Vector</span>, <span class=\"type\">Double</span>) = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> thisIterStepSize = stepSize / math.sqrt(iter)</div><div class=\"line\">    <span class=\"comment\">// Take gradient step</span></div><div class=\"line\">    <span class=\"keyword\">val</span> brzWeights: <span class=\"type\">BV</span>[<span class=\"type\">Double</span>] = weightsOld.asBreeze.toDenseVector</div><div class=\"line\">    brzAxpy(-thisIterStepSize, gradient.asBreeze, brzWeights)</div><div class=\"line\">    <span class=\"comment\">// Apply proximal operator (soft thresholding)</span></div><div class=\"line\">    <span class=\"keyword\">val</span> shrinkageVal = regParam * thisIterStepSize</div><div class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">val</span> len = brzWeights.length</div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt; len) &#123;</div><div class=\"line\">      <span class=\"keyword\">val</span> wi = brzWeights(i)</div><div class=\"line\">      brzWeights(i) = signum(wi) * max(<span class=\"number\">0.0</span>, abs(wi) - shrinkageVal)</div><div class=\"line\">      i += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    (<span class=\"type\">Vectors</span>.fromBreeze(brzWeights), brzNorm(brzWeights, <span class=\"number\">1.0</span>) * regParam)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"L2范式\"><a href=\"#L2范式\" class=\"headerlink\" title=\"L2范式\"></a>L2范式</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DeveloperApi</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SquaredL2Updater</span> <span class=\"keyword\">extends</span> <span class=\"title\">Updater</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute</span></span>(</div><div class=\"line\">      weightsOld: <span class=\"type\">Vector</span>,</div><div class=\"line\">      gradient: <span class=\"type\">Vector</span>,</div><div class=\"line\">      stepSize: <span class=\"type\">Double</span>,</div><div class=\"line\">      iter: <span class=\"type\">Int</span>,</div><div class=\"line\">      regParam: <span class=\"type\">Double</span>): (<span class=\"type\">Vector</span>, <span class=\"type\">Double</span>) = &#123;</div><div class=\"line\">    <span class=\"comment\">// add up both updates from the gradient of the loss (= step) as well as</span></div><div class=\"line\">    <span class=\"comment\">// the gradient of the regularizer (= regParam * weightsOld)</span></div><div class=\"line\">    <span class=\"comment\">// w' = w - thisIterStepSize * (gradient + regParam * w)</span></div><div class=\"line\">    <span class=\"comment\">// w' = (1 - thisIterStepSize * regParam) * w - thisIterStepSize * gradient</span></div><div class=\"line\">    <span class=\"keyword\">val</span> thisIterStepSize = stepSize / math.sqrt(iter)</div><div class=\"line\">    <span class=\"keyword\">val</span> brzWeights: <span class=\"type\">BV</span>[<span class=\"type\">Double</span>] = weightsOld.asBreeze.toDenseVector</div><div class=\"line\">    brzWeights :*= (<span class=\"number\">1.0</span> - thisIterStepSize * regParam)</div><div class=\"line\">    brzAxpy(-thisIterStepSize, gradient.asBreeze, brzWeights)</div><div class=\"line\">    <span class=\"keyword\">val</span> norm = brzNorm(brzWeights, <span class=\"number\">2.0</span>)</div><div class=\"line\"></div><div class=\"line\">    (<span class=\"type\">Vectors</span>.fromBreeze(brzWeights), <span class=\"number\">0.5</span> * regParam * norm * norm)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"4-1-正则化\"><a href=\"#4-1-正则化\" class=\"headerlink\" title=\"4.1 正则化\"></a>4.1 正则化</h1><p>正则化是为了约束训练过程，使其向生成简单模型的方向收敛，从而避免过拟合。MLlib目前支持下面的正则化方法：</p>\n<table>\n<thead>\n<tr>\n<th>范数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>L1</td>\n<td>促进产生稀疏的权值</td>\n</tr>\n<tr>\n<td>L2</td>\n<td>平滑</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"MLlib正则化抽象类\"><a href=\"#MLlib正则化抽象类\" class=\"headerlink\" title=\"MLlib正则化抽象类\"></a>MLlib正则化抽象类</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Updater</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * Compute an updated value for weights given the gradient, stepSize, iteration number and</div><div class=\"line\">   * regularization parameter. Also returns the regularization value regParam * R(w)</div><div class=\"line\">   * computed using the *updated* weights.</div><div class=\"line\">   *</div><div class=\"line\">   * @param weightsOld - Column matrix of size dx1 where d is the number of features.</div><div class=\"line\">   * @param gradient - Column matrix of size dx1 where d is the number of features.</div><div class=\"line\">   * @param stepSize - step size across iterations</div><div class=\"line\">   * @param iter - Iteration number</div><div class=\"line\">   * @param regParam - Regularization parameter</div><div class=\"line\">   *</div><div class=\"line\">   * @return A tuple of 2 elements. The first element is a column matrix containing updated weights,</div><div class=\"line\">   *         and the second element is the regularization value computed using updated weights.</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute</span></span>(</div><div class=\"line\">      weightsOld: <span class=\"type\">Vector</span>,</div><div class=\"line\">      gradient: <span class=\"type\">Vector</span>,</div><div class=\"line\">      stepSize: <span class=\"type\">Double</span>,</div><div class=\"line\">      iter: <span class=\"type\">Int</span>,</div><div class=\"line\">      regParam: <span class=\"type\">Double</span>): (<span class=\"type\">Vector</span>, <span class=\"type\">Double</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"L1范式\"><a href=\"#L1范式\" class=\"headerlink\" title=\"L1范式\"></a>L1范式</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DeveloperApi</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">L1Updater</span> <span class=\"keyword\">extends</span> <span class=\"title\">Updater</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute</span></span>(</div><div class=\"line\">      weightsOld: <span class=\"type\">Vector</span>,</div><div class=\"line\">      gradient: <span class=\"type\">Vector</span>,</div><div class=\"line\">      stepSize: <span class=\"type\">Double</span>,</div><div class=\"line\">      iter: <span class=\"type\">Int</span>,</div><div class=\"line\">      regParam: <span class=\"type\">Double</span>): (<span class=\"type\">Vector</span>, <span class=\"type\">Double</span>) = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> thisIterStepSize = stepSize / math.sqrt(iter)</div><div class=\"line\">    <span class=\"comment\">// Take gradient step</span></div><div class=\"line\">    <span class=\"keyword\">val</span> brzWeights: <span class=\"type\">BV</span>[<span class=\"type\">Double</span>] = weightsOld.asBreeze.toDenseVector</div><div class=\"line\">    brzAxpy(-thisIterStepSize, gradient.asBreeze, brzWeights)</div><div class=\"line\">    <span class=\"comment\">// Apply proximal operator (soft thresholding)</span></div><div class=\"line\">    <span class=\"keyword\">val</span> shrinkageVal = regParam * thisIterStepSize</div><div class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">val</span> len = brzWeights.length</div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt; len) &#123;</div><div class=\"line\">      <span class=\"keyword\">val</span> wi = brzWeights(i)</div><div class=\"line\">      brzWeights(i) = signum(wi) * max(<span class=\"number\">0.0</span>, abs(wi) - shrinkageVal)</div><div class=\"line\">      i += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    (<span class=\"type\">Vectors</span>.fromBreeze(brzWeights), brzNorm(brzWeights, <span class=\"number\">1.0</span>) * regParam)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"L2范式\"><a href=\"#L2范式\" class=\"headerlink\" title=\"L2范式\"></a>L2范式</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@DeveloperApi</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SquaredL2Updater</span> <span class=\"keyword\">extends</span> <span class=\"title\">Updater</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute</span></span>(</div><div class=\"line\">      weightsOld: <span class=\"type\">Vector</span>,</div><div class=\"line\">      gradient: <span class=\"type\">Vector</span>,</div><div class=\"line\">      stepSize: <span class=\"type\">Double</span>,</div><div class=\"line\">      iter: <span class=\"type\">Int</span>,</div><div class=\"line\">      regParam: <span class=\"type\">Double</span>): (<span class=\"type\">Vector</span>, <span class=\"type\">Double</span>) = &#123;</div><div class=\"line\">    <span class=\"comment\">// add up both updates from the gradient of the loss (= step) as well as</span></div><div class=\"line\">    <span class=\"comment\">// the gradient of the regularizer (= regParam * weightsOld)</span></div><div class=\"line\">    <span class=\"comment\">// w' = w - thisIterStepSize * (gradient + regParam * w)</span></div><div class=\"line\">    <span class=\"comment\">// w' = (1 - thisIterStepSize * regParam) * w - thisIterStepSize * gradient</span></div><div class=\"line\">    <span class=\"keyword\">val</span> thisIterStepSize = stepSize / math.sqrt(iter)</div><div class=\"line\">    <span class=\"keyword\">val</span> brzWeights: <span class=\"type\">BV</span>[<span class=\"type\">Double</span>] = weightsOld.asBreeze.toDenseVector</div><div class=\"line\">    brzWeights :*= (<span class=\"number\">1.0</span> - thisIterStepSize * regParam)</div><div class=\"line\">    brzAxpy(-thisIterStepSize, gradient.asBreeze, brzWeights)</div><div class=\"line\">    <span class=\"keyword\">val</span> norm = brzNorm(brzWeights, <span class=\"number\">2.0</span>)</div><div class=\"line\"></div><div class=\"line\">    (<span class=\"type\">Vectors</span>.fromBreeze(brzWeights), <span class=\"number\">0.5</span> * regParam * norm * norm)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"mac安装caffe过程","date":"2016-11-26T05:51:29.000Z","_content":"\n# 0. 关于Caffe\n\n昨天看到amazon将mxnet做的其深度深度算法的消息，突然觉得应该开始学习一些深度学习的知识了。\n本来想试试mxnet的，但是觉得还是先从caffe开始吧。caffe是深度学习在图像领域广泛使用的框架，有很多现在的model可以直接使用。\n\n# 1. 安装依赖\n\n使用brew安装依赖，首先更新一下brew，不然可能出现意想不到的各种错误。\n```shell\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n然后安装依赖\n\n```shell\nbrew install -vd snappy leveldb gflags glog szip lmdb\nbrew tap homebrew/science\nbrew install hdf5 opencv protobuf boost\n```\n\n# 2. 编译\n\n下载caffe源码\n\n```shell\ngit clone https://github.com/bvlc/caffe.git\ncd caffe\ncp Makefile.config.example Makefile.config\n```\n\n修改编译模式开关\n\n```shell\nCPU_ONLY := 1\n```\n编译\n```shell\nmake -j\n```\n\n编译完成，可以开始动手运行例子了！\n\n","source":"_posts/20161126-install-caffe-on-mac.md","raw":"---\ntitle: mac安装caffe过程\ndate: 2016-11-26 13:51:29\ntags:\n    - caffe\n    - 深度学习\ncategories:\n    - 深度学习\n---\n\n# 0. 关于Caffe\n\n昨天看到amazon将mxnet做的其深度深度算法的消息，突然觉得应该开始学习一些深度学习的知识了。\n本来想试试mxnet的，但是觉得还是先从caffe开始吧。caffe是深度学习在图像领域广泛使用的框架，有很多现在的model可以直接使用。\n\n# 1. 安装依赖\n\n使用brew安装依赖，首先更新一下brew，不然可能出现意想不到的各种错误。\n```shell\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n然后安装依赖\n\n```shell\nbrew install -vd snappy leveldb gflags glog szip lmdb\nbrew tap homebrew/science\nbrew install hdf5 opencv protobuf boost\n```\n\n# 2. 编译\n\n下载caffe源码\n\n```shell\ngit clone https://github.com/bvlc/caffe.git\ncd caffe\ncp Makefile.config.example Makefile.config\n```\n\n修改编译模式开关\n\n```shell\nCPU_ONLY := 1\n```\n编译\n```shell\nmake -j\n```\n\n编译完成，可以开始动手运行例子了！\n\n","slug":"20161126-install-caffe-on-mac","published":1,"updated":"2016-11-26T09:28:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32rv0000h65s6qwjilt5k","content":"<h1 id=\"0-关于Caffe\"><a href=\"#0-关于Caffe\" class=\"headerlink\" title=\"0. 关于Caffe\"></a>0. 关于Caffe</h1><p>昨天看到amazon将mxnet做的其深度深度算法的消息，突然觉得应该开始学习一些深度学习的知识了。<br>本来想试试mxnet的，但是觉得还是先从caffe开始吧。caffe是深度学习在图像领域广泛使用的框架，有很多现在的model可以直接使用。</p>\n<h1 id=\"1-安装依赖\"><a href=\"#1-安装依赖\" class=\"headerlink\" title=\"1. 安装依赖\"></a>1. 安装依赖</h1><p>使用brew安装依赖，首先更新一下brew，不然可能出现意想不到的各种错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure></p>\n<p>然后安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install -vd snappy leveldb gflags glog szip lmdb</div><div class=\"line\">brew tap homebrew/science</div><div class=\"line\">brew install hdf5 opencv protobuf boost</div></pre></td></tr></table></figure>\n<h1 id=\"2-编译\"><a href=\"#2-编译\" class=\"headerlink\" title=\"2. 编译\"></a>2. 编译</h1><p>下载caffe源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/bvlc/caffe.git</div><div class=\"line\">cd caffe</div><div class=\"line\">cp Makefile.config.example Makefile.config</div></pre></td></tr></table></figure>\n<p>修改编译模式开关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CPU_ONLY := 1</div></pre></td></tr></table></figure>\n<p>编译<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make -j</div></pre></td></tr></table></figure></p>\n<p>编译完成，可以开始动手运行例子了！</p>\n","excerpt":"","more":"<h1 id=\"0-关于Caffe\"><a href=\"#0-关于Caffe\" class=\"headerlink\" title=\"0. 关于Caffe\"></a>0. 关于Caffe</h1><p>昨天看到amazon将mxnet做的其深度深度算法的消息，突然觉得应该开始学习一些深度学习的知识了。<br>本来想试试mxnet的，但是觉得还是先从caffe开始吧。caffe是深度学习在图像领域广泛使用的框架，有很多现在的model可以直接使用。</p>\n<h1 id=\"1-安装依赖\"><a href=\"#1-安装依赖\" class=\"headerlink\" title=\"1. 安装依赖\"></a>1. 安装依赖</h1><p>使用brew安装依赖，首先更新一下brew，不然可能出现意想不到的各种错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure></p>\n<p>然后安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install -vd snappy leveldb gflags glog szip lmdb</div><div class=\"line\">brew tap homebrew/science</div><div class=\"line\">brew install hdf5 opencv protobuf boost</div></pre></td></tr></table></figure>\n<h1 id=\"2-编译\"><a href=\"#2-编译\" class=\"headerlink\" title=\"2. 编译\"></a>2. 编译</h1><p>下载caffe源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/bvlc/caffe.git</div><div class=\"line\">cd caffe</div><div class=\"line\">cp Makefile.config.example Makefile.config</div></pre></td></tr></table></figure>\n<p>修改编译模式开关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CPU_ONLY := 1</div></pre></td></tr></table></figure>\n<p>编译<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make -j</div></pre></td></tr></table></figure></p>\n<p>编译完成，可以开始动手运行例子了！</p>\n"},{"title":"使用mxnet进行kaggle竞赛digit recognizer","date":"2016-11-26T13:38:48.000Z","_content":"\n# 0. 编译mxnet\n\n上一篇讲了如何编译caffe，mxnet与caffe的依赖包大体相同，只需要将mxnet依赖有源码从github上全clone下来进行编译即可。\n\n```shell\ngit clone --recursive https://github.com/dmlc/mxnet\ncd mxnet; cp make/osx.mk ./config.mk; make -j\n```\n\n# 1. 应用\n\n使用mxnet的python api，快速开发一个应用算法。\n\n```python\nimport numpy as np\nimport pandas as pd\nimport mxnet as mx\nimport logging\n\nVALIDATION_SIZE = 2000\n\ndataset = pd.read_csv(\"../input/train.csv\")\ntarget = dataset[[0]].values.ravel()\ntrain = dataset.iloc[:,1:].values\n\n\ndef get_lenet():\n    data = mx.symbol.Variable('data')\n    # first conv\n    conv1 = mx.symbol.Convolution(data=data, kernel=(5,5), num_filter=20)\n    tanh1 = mx.symbol.Activation(data=conv1, act_type=\"tanh\")\n    pool1 = mx.symbol.Pooling(data=tanh1, pool_type=\"max\",\n                              kernel=(2,2), stride=(2,2))\n    # second conv\n    conv2 = mx.symbol.Convolution(data=pool1, kernel=(5,5), num_filter=50)\n    tanh2 = mx.symbol.Activation(data=conv2, act_type=\"tanh\")\n    pool2 = mx.symbol.Pooling(data=tanh2, pool_type=\"max\",\n                              kernel=(2,2), stride=(2,2))\n    # first fullc\n    flatten = mx.symbol.Flatten(data=pool2)\n    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=500)\n    tanh3 = mx.symbol.Activation(data=fc1, act_type=\"tanh\")\n    # second fullc\n    fc2 = mx.symbol.FullyConnected(data=tanh3, num_hidden=10)\n    # loss\n    lenet = mx.symbol.SoftmaxOutput(data=fc2, name='softmax')\n    return lenet\n\nval_data = train[:VALIDATION_SIZE].astype('float32')\nval_label = target[:VALIDATION_SIZE]\ntrain_data = train[VALIDATION_SIZE: , :].astype('float32')\ntrain_label = target[VALIDATION_SIZE:]\ntrain_data = np.array(train_data).reshape((-1, 1, 28, 28))\nval_data = np.array(val_data).reshape((-1, 1, 28, 28))\n\ntrain_data[:] /= 256.0\nval_data[:]/= 256.0\n\nbatch_size = 500\ntrain_iter = mx.io.NDArrayIter(train_data, train_label, batch_size=batch_size, shuffle=True)\nval_iter = mx.io.NDArrayIter(val_data, val_label, batch_size=batch_size)\n\n# logging\nhead = '%(asctime)-15s Node[0] %(message)s'\nlogging.basicConfig(level=logging.DEBUG, format=head)\n\n# create model\ndevs = mx.gpu(0)\nnetwork=get_lenet()\nmodel = mx.model.FeedForward(\n        #ctx                = devs,\n        symbol             = network,\n        num_epoch          = 4,\n        learning_rate      = 0.1,\n        momentum           = 0.9,\n        wd                 = 0.00001,\n        initializer        = mx.init.Xavier(factor_type=\"in\", magnitude=2.34)\n        )\n\neval_metrics = ['accuracy']\nmodel.fit(\n\tX=train_iter,\n\teval_metric        = eval_metrics,\n\teval_data\t = val_iter\n\t)\n\n#predict\ntest = pd.read_csv(\"../input/test.csv\").values\ntest_data = test.astype('float32')\ntest_data = np.array(test_data).reshape((-1, 1, 28, 28))\ntest_data[:]/= 256.0\ntest_iter = mx.io.NDArrayIter(test_data, batch_size=batch_size)\n\npred = model.predict(X = test_iter)\npred = np.argsort(pred)\nnp.savetxt('submission_lenet.csv', np.c_[range(1,len(test)+1),pred[:,9]], delimiter=',', header = 'ImageId,Label', comments = '', fmt='%d')\n```\n\n# 结果\n\n```txt\n2016-11-26 21:19:07,577 Node[0] Start training with [cpu(0)]\n2016-11-26 21:21:21,802 Node[0] Epoch[0] Resetting Data Iterator\n2016-11-26 21:21:21,802 Node[0] Epoch[0] Time cost=134.220\n2016-11-26 21:21:24,613 Node[0] Epoch[0] Validation-accuracy=0.974000\n2016-11-26 21:23:36,314 Node[0] Epoch[1] Resetting Data Iterator\n2016-11-26 21:23:36,314 Node[0] Epoch[1] Time cost=131.700\n2016-11-26 21:23:38,900 Node[0] Epoch[1] Validation-accuracy=0.988000\n2016-11-26 21:25:48,668 Node[0] Epoch[2] Resetting Data Iterator\n2016-11-26 21:25:48,669 Node[0] Epoch[2] Time cost=129.769\n2016-11-26 21:25:51,246 Node[0] Epoch[2] Validation-accuracy=0.987500\n2016-11-26 21:28:01,337 Node[0] Epoch[3] Resetting Data Iterator\n2016-11-26 21:28:01,337 Node[0] Epoch[3] Time cost=130.091\n2016-11-26 21:28:03,945 Node[0] Epoch[3] Validation-accuracy=0.988000\n```\n提交的准确率为0.98571\n\n\n\n\n","source":"_posts/20161126-mxnet-for-kaggle-digit-recognizer.md","raw":"---\ntitle: 使用mxnet进行kaggle竞赛digit recognizer\ndate: 2016-11-26 21:38:48\ntags:\n    - 深度学习\n    - mxnet\n\ncategories:\n    - 深度学习\n---\n\n# 0. 编译mxnet\n\n上一篇讲了如何编译caffe，mxnet与caffe的依赖包大体相同，只需要将mxnet依赖有源码从github上全clone下来进行编译即可。\n\n```shell\ngit clone --recursive https://github.com/dmlc/mxnet\ncd mxnet; cp make/osx.mk ./config.mk; make -j\n```\n\n# 1. 应用\n\n使用mxnet的python api，快速开发一个应用算法。\n\n```python\nimport numpy as np\nimport pandas as pd\nimport mxnet as mx\nimport logging\n\nVALIDATION_SIZE = 2000\n\ndataset = pd.read_csv(\"../input/train.csv\")\ntarget = dataset[[0]].values.ravel()\ntrain = dataset.iloc[:,1:].values\n\n\ndef get_lenet():\n    data = mx.symbol.Variable('data')\n    # first conv\n    conv1 = mx.symbol.Convolution(data=data, kernel=(5,5), num_filter=20)\n    tanh1 = mx.symbol.Activation(data=conv1, act_type=\"tanh\")\n    pool1 = mx.symbol.Pooling(data=tanh1, pool_type=\"max\",\n                              kernel=(2,2), stride=(2,2))\n    # second conv\n    conv2 = mx.symbol.Convolution(data=pool1, kernel=(5,5), num_filter=50)\n    tanh2 = mx.symbol.Activation(data=conv2, act_type=\"tanh\")\n    pool2 = mx.symbol.Pooling(data=tanh2, pool_type=\"max\",\n                              kernel=(2,2), stride=(2,2))\n    # first fullc\n    flatten = mx.symbol.Flatten(data=pool2)\n    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=500)\n    tanh3 = mx.symbol.Activation(data=fc1, act_type=\"tanh\")\n    # second fullc\n    fc2 = mx.symbol.FullyConnected(data=tanh3, num_hidden=10)\n    # loss\n    lenet = mx.symbol.SoftmaxOutput(data=fc2, name='softmax')\n    return lenet\n\nval_data = train[:VALIDATION_SIZE].astype('float32')\nval_label = target[:VALIDATION_SIZE]\ntrain_data = train[VALIDATION_SIZE: , :].astype('float32')\ntrain_label = target[VALIDATION_SIZE:]\ntrain_data = np.array(train_data).reshape((-1, 1, 28, 28))\nval_data = np.array(val_data).reshape((-1, 1, 28, 28))\n\ntrain_data[:] /= 256.0\nval_data[:]/= 256.0\n\nbatch_size = 500\ntrain_iter = mx.io.NDArrayIter(train_data, train_label, batch_size=batch_size, shuffle=True)\nval_iter = mx.io.NDArrayIter(val_data, val_label, batch_size=batch_size)\n\n# logging\nhead = '%(asctime)-15s Node[0] %(message)s'\nlogging.basicConfig(level=logging.DEBUG, format=head)\n\n# create model\ndevs = mx.gpu(0)\nnetwork=get_lenet()\nmodel = mx.model.FeedForward(\n        #ctx                = devs,\n        symbol             = network,\n        num_epoch          = 4,\n        learning_rate      = 0.1,\n        momentum           = 0.9,\n        wd                 = 0.00001,\n        initializer        = mx.init.Xavier(factor_type=\"in\", magnitude=2.34)\n        )\n\neval_metrics = ['accuracy']\nmodel.fit(\n\tX=train_iter,\n\teval_metric        = eval_metrics,\n\teval_data\t = val_iter\n\t)\n\n#predict\ntest = pd.read_csv(\"../input/test.csv\").values\ntest_data = test.astype('float32')\ntest_data = np.array(test_data).reshape((-1, 1, 28, 28))\ntest_data[:]/= 256.0\ntest_iter = mx.io.NDArrayIter(test_data, batch_size=batch_size)\n\npred = model.predict(X = test_iter)\npred = np.argsort(pred)\nnp.savetxt('submission_lenet.csv', np.c_[range(1,len(test)+1),pred[:,9]], delimiter=',', header = 'ImageId,Label', comments = '', fmt='%d')\n```\n\n# 结果\n\n```txt\n2016-11-26 21:19:07,577 Node[0] Start training with [cpu(0)]\n2016-11-26 21:21:21,802 Node[0] Epoch[0] Resetting Data Iterator\n2016-11-26 21:21:21,802 Node[0] Epoch[0] Time cost=134.220\n2016-11-26 21:21:24,613 Node[0] Epoch[0] Validation-accuracy=0.974000\n2016-11-26 21:23:36,314 Node[0] Epoch[1] Resetting Data Iterator\n2016-11-26 21:23:36,314 Node[0] Epoch[1] Time cost=131.700\n2016-11-26 21:23:38,900 Node[0] Epoch[1] Validation-accuracy=0.988000\n2016-11-26 21:25:48,668 Node[0] Epoch[2] Resetting Data Iterator\n2016-11-26 21:25:48,669 Node[0] Epoch[2] Time cost=129.769\n2016-11-26 21:25:51,246 Node[0] Epoch[2] Validation-accuracy=0.987500\n2016-11-26 21:28:01,337 Node[0] Epoch[3] Resetting Data Iterator\n2016-11-26 21:28:01,337 Node[0] Epoch[3] Time cost=130.091\n2016-11-26 21:28:03,945 Node[0] Epoch[3] Validation-accuracy=0.988000\n```\n提交的准确率为0.98571\n\n\n\n\n","slug":"20161126-mxnet-for-kaggle-digit-recognizer","published":1,"updated":"2016-12-03T09:15:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32rv2000i65s64uqj3aev","content":"<h1 id=\"0-编译mxnet\"><a href=\"#0-编译mxnet\" class=\"headerlink\" title=\"0. 编译mxnet\"></a>0. 编译mxnet</h1><p>上一篇讲了如何编译caffe，mxnet与caffe的依赖包大体相同，只需要将mxnet依赖有源码从github上全clone下来进行编译即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone --recursive https://github.com/dmlc/mxnet</div><div class=\"line\">cd mxnet; cp make/osx.mk ./config.mk; make -j</div></pre></td></tr></table></figure>\n<h1 id=\"1-应用\"><a href=\"#1-应用\" class=\"headerlink\" title=\"1. 应用\"></a>1. 应用</h1><p>使用mxnet的python api，快速开发一个应用算法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</div><div class=\"line\"><span class=\"keyword\">import</span> mxnet <span class=\"keyword\">as</span> mx</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"></div><div class=\"line\">VALIDATION_SIZE = <span class=\"number\">2000</span></div><div class=\"line\"></div><div class=\"line\">dataset = pd.read_csv(<span class=\"string\">\"../input/train.csv\"</span>)</div><div class=\"line\">target = dataset[[<span class=\"number\">0</span>]].values.ravel()</div><div class=\"line\">train = dataset.iloc[:,<span class=\"number\">1</span>:].values</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_lenet</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = mx.symbol.Variable(<span class=\"string\">'data'</span>)</div><div class=\"line\">    <span class=\"comment\"># first conv</span></div><div class=\"line\">    conv1 = mx.symbol.Convolution(data=data, kernel=(<span class=\"number\">5</span>,<span class=\"number\">5</span>), num_filter=<span class=\"number\">20</span>)</div><div class=\"line\">    tanh1 = mx.symbol.Activation(data=conv1, act_type=<span class=\"string\">\"tanh\"</span>)</div><div class=\"line\">    pool1 = mx.symbol.Pooling(data=tanh1, pool_type=<span class=\"string\">\"max\"</span>,</div><div class=\"line\">                              kernel=(<span class=\"number\">2</span>,<span class=\"number\">2</span>), stride=(<span class=\"number\">2</span>,<span class=\"number\">2</span>))</div><div class=\"line\">    <span class=\"comment\"># second conv</span></div><div class=\"line\">    conv2 = mx.symbol.Convolution(data=pool1, kernel=(<span class=\"number\">5</span>,<span class=\"number\">5</span>), num_filter=<span class=\"number\">50</span>)</div><div class=\"line\">    tanh2 = mx.symbol.Activation(data=conv2, act_type=<span class=\"string\">\"tanh\"</span>)</div><div class=\"line\">    pool2 = mx.symbol.Pooling(data=tanh2, pool_type=<span class=\"string\">\"max\"</span>,</div><div class=\"line\">                              kernel=(<span class=\"number\">2</span>,<span class=\"number\">2</span>), stride=(<span class=\"number\">2</span>,<span class=\"number\">2</span>))</div><div class=\"line\">    <span class=\"comment\"># first fullc</span></div><div class=\"line\">    flatten = mx.symbol.Flatten(data=pool2)</div><div class=\"line\">    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=<span class=\"number\">500</span>)</div><div class=\"line\">    tanh3 = mx.symbol.Activation(data=fc1, act_type=<span class=\"string\">\"tanh\"</span>)</div><div class=\"line\">    <span class=\"comment\"># second fullc</span></div><div class=\"line\">    fc2 = mx.symbol.FullyConnected(data=tanh3, num_hidden=<span class=\"number\">10</span>)</div><div class=\"line\">    <span class=\"comment\"># loss</span></div><div class=\"line\">    lenet = mx.symbol.SoftmaxOutput(data=fc2, name=<span class=\"string\">'softmax'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> lenet</div><div class=\"line\"></div><div class=\"line\">val_data = train[:VALIDATION_SIZE].astype(<span class=\"string\">'float32'</span>)</div><div class=\"line\">val_label = target[:VALIDATION_SIZE]</div><div class=\"line\">train_data = train[VALIDATION_SIZE: , :].astype(<span class=\"string\">'float32'</span>)</div><div class=\"line\">train_label = target[VALIDATION_SIZE:]</div><div class=\"line\">train_data = np.array(train_data).reshape((<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>))</div><div class=\"line\">val_data = np.array(val_data).reshape((<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>))</div><div class=\"line\"></div><div class=\"line\">train_data[:] /= <span class=\"number\">256.0</span></div><div class=\"line\">val_data[:]/= <span class=\"number\">256.0</span></div><div class=\"line\"></div><div class=\"line\">batch_size = <span class=\"number\">500</span></div><div class=\"line\">train_iter = mx.io.NDArrayIter(train_data, train_label, batch_size=batch_size, shuffle=<span class=\"keyword\">True</span>)</div><div class=\"line\">val_iter = mx.io.NDArrayIter(val_data, val_label, batch_size=batch_size)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># logging</span></div><div class=\"line\">head = <span class=\"string\">'%(asctime)-15s Node[0] %(message)s'</span></div><div class=\"line\">logging.basicConfig(level=logging.DEBUG, format=head)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># create model</span></div><div class=\"line\">devs = mx.gpu(<span class=\"number\">0</span>)</div><div class=\"line\">network=get_lenet()</div><div class=\"line\">model = mx.model.FeedForward(</div><div class=\"line\">        <span class=\"comment\">#ctx                = devs,</span></div><div class=\"line\">        symbol             = network,</div><div class=\"line\">        num_epoch          = <span class=\"number\">4</span>,</div><div class=\"line\">        learning_rate      = <span class=\"number\">0.1</span>,</div><div class=\"line\">        momentum           = <span class=\"number\">0.9</span>,</div><div class=\"line\">        wd                 = <span class=\"number\">0.00001</span>,</div><div class=\"line\">        initializer        = mx.init.Xavier(factor_type=<span class=\"string\">\"in\"</span>, magnitude=<span class=\"number\">2.34</span>)</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\">eval_metrics = [<span class=\"string\">'accuracy'</span>]</div><div class=\"line\">model.fit(</div><div class=\"line\">\tX=train_iter,</div><div class=\"line\">\teval_metric        = eval_metrics,</div><div class=\"line\">\teval_data\t = val_iter</div><div class=\"line\">\t)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#predict</span></div><div class=\"line\">test = pd.read_csv(<span class=\"string\">\"../input/test.csv\"</span>).values</div><div class=\"line\">test_data = test.astype(<span class=\"string\">'float32'</span>)</div><div class=\"line\">test_data = np.array(test_data).reshape((<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>))</div><div class=\"line\">test_data[:]/= <span class=\"number\">256.0</span></div><div class=\"line\">test_iter = mx.io.NDArrayIter(test_data, batch_size=batch_size)</div><div class=\"line\"></div><div class=\"line\">pred = model.predict(X = test_iter)</div><div class=\"line\">pred = np.argsort(pred)</div><div class=\"line\">np.savetxt(<span class=\"string\">'submission_lenet.csv'</span>, np.c_[range(<span class=\"number\">1</span>,len(test)+<span class=\"number\">1</span>),pred[:,<span class=\"number\">9</span>]], delimiter=<span class=\"string\">','</span>, header = <span class=\"string\">'ImageId,Label'</span>, comments = <span class=\"string\">''</span>, fmt=<span class=\"string\">'%d'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-11-26 21:19:07,577 Node[0] Start training with [cpu(0)]</div><div class=\"line\">2016-11-26 21:21:21,802 Node[0] Epoch[0] Resetting Data Iterator</div><div class=\"line\">2016-11-26 21:21:21,802 Node[0] Epoch[0] Time cost=134.220</div><div class=\"line\">2016-11-26 21:21:24,613 Node[0] Epoch[0] Validation-accuracy=0.974000</div><div class=\"line\">2016-11-26 21:23:36,314 Node[0] Epoch[1] Resetting Data Iterator</div><div class=\"line\">2016-11-26 21:23:36,314 Node[0] Epoch[1] Time cost=131.700</div><div class=\"line\">2016-11-26 21:23:38,900 Node[0] Epoch[1] Validation-accuracy=0.988000</div><div class=\"line\">2016-11-26 21:25:48,668 Node[0] Epoch[2] Resetting Data Iterator</div><div class=\"line\">2016-11-26 21:25:48,669 Node[0] Epoch[2] Time cost=129.769</div><div class=\"line\">2016-11-26 21:25:51,246 Node[0] Epoch[2] Validation-accuracy=0.987500</div><div class=\"line\">2016-11-26 21:28:01,337 Node[0] Epoch[3] Resetting Data Iterator</div><div class=\"line\">2016-11-26 21:28:01,337 Node[0] Epoch[3] Time cost=130.091</div><div class=\"line\">2016-11-26 21:28:03,945 Node[0] Epoch[3] Validation-accuracy=0.988000</div></pre></td></tr></table></figure>\n<p>提交的准确率为0.98571</p>\n","excerpt":"","more":"<h1 id=\"0-编译mxnet\"><a href=\"#0-编译mxnet\" class=\"headerlink\" title=\"0. 编译mxnet\"></a>0. 编译mxnet</h1><p>上一篇讲了如何编译caffe，mxnet与caffe的依赖包大体相同，只需要将mxnet依赖有源码从github上全clone下来进行编译即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone --recursive https://github.com/dmlc/mxnet</div><div class=\"line\">cd mxnet; cp make/osx.mk ./config.mk; make -j</div></pre></td></tr></table></figure>\n<h1 id=\"1-应用\"><a href=\"#1-应用\" class=\"headerlink\" title=\"1. 应用\"></a>1. 应用</h1><p>使用mxnet的python api，快速开发一个应用算法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</div><div class=\"line\"><span class=\"keyword\">import</span> mxnet <span class=\"keyword\">as</span> mx</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"></div><div class=\"line\">VALIDATION_SIZE = <span class=\"number\">2000</span></div><div class=\"line\"></div><div class=\"line\">dataset = pd.read_csv(<span class=\"string\">\"../input/train.csv\"</span>)</div><div class=\"line\">target = dataset[[<span class=\"number\">0</span>]].values.ravel()</div><div class=\"line\">train = dataset.iloc[:,<span class=\"number\">1</span>:].values</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_lenet</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = mx.symbol.Variable(<span class=\"string\">'data'</span>)</div><div class=\"line\">    <span class=\"comment\"># first conv</span></div><div class=\"line\">    conv1 = mx.symbol.Convolution(data=data, kernel=(<span class=\"number\">5</span>,<span class=\"number\">5</span>), num_filter=<span class=\"number\">20</span>)</div><div class=\"line\">    tanh1 = mx.symbol.Activation(data=conv1, act_type=<span class=\"string\">\"tanh\"</span>)</div><div class=\"line\">    pool1 = mx.symbol.Pooling(data=tanh1, pool_type=<span class=\"string\">\"max\"</span>,</div><div class=\"line\">                              kernel=(<span class=\"number\">2</span>,<span class=\"number\">2</span>), stride=(<span class=\"number\">2</span>,<span class=\"number\">2</span>))</div><div class=\"line\">    <span class=\"comment\"># second conv</span></div><div class=\"line\">    conv2 = mx.symbol.Convolution(data=pool1, kernel=(<span class=\"number\">5</span>,<span class=\"number\">5</span>), num_filter=<span class=\"number\">50</span>)</div><div class=\"line\">    tanh2 = mx.symbol.Activation(data=conv2, act_type=<span class=\"string\">\"tanh\"</span>)</div><div class=\"line\">    pool2 = mx.symbol.Pooling(data=tanh2, pool_type=<span class=\"string\">\"max\"</span>,</div><div class=\"line\">                              kernel=(<span class=\"number\">2</span>,<span class=\"number\">2</span>), stride=(<span class=\"number\">2</span>,<span class=\"number\">2</span>))</div><div class=\"line\">    <span class=\"comment\"># first fullc</span></div><div class=\"line\">    flatten = mx.symbol.Flatten(data=pool2)</div><div class=\"line\">    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=<span class=\"number\">500</span>)</div><div class=\"line\">    tanh3 = mx.symbol.Activation(data=fc1, act_type=<span class=\"string\">\"tanh\"</span>)</div><div class=\"line\">    <span class=\"comment\"># second fullc</span></div><div class=\"line\">    fc2 = mx.symbol.FullyConnected(data=tanh3, num_hidden=<span class=\"number\">10</span>)</div><div class=\"line\">    <span class=\"comment\"># loss</span></div><div class=\"line\">    lenet = mx.symbol.SoftmaxOutput(data=fc2, name=<span class=\"string\">'softmax'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> lenet</div><div class=\"line\"></div><div class=\"line\">val_data = train[:VALIDATION_SIZE].astype(<span class=\"string\">'float32'</span>)</div><div class=\"line\">val_label = target[:VALIDATION_SIZE]</div><div class=\"line\">train_data = train[VALIDATION_SIZE: , :].astype(<span class=\"string\">'float32'</span>)</div><div class=\"line\">train_label = target[VALIDATION_SIZE:]</div><div class=\"line\">train_data = np.array(train_data).reshape((<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>))</div><div class=\"line\">val_data = np.array(val_data).reshape((<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>))</div><div class=\"line\"></div><div class=\"line\">train_data[:] /= <span class=\"number\">256.0</span></div><div class=\"line\">val_data[:]/= <span class=\"number\">256.0</span></div><div class=\"line\"></div><div class=\"line\">batch_size = <span class=\"number\">500</span></div><div class=\"line\">train_iter = mx.io.NDArrayIter(train_data, train_label, batch_size=batch_size, shuffle=<span class=\"keyword\">True</span>)</div><div class=\"line\">val_iter = mx.io.NDArrayIter(val_data, val_label, batch_size=batch_size)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># logging</span></div><div class=\"line\">head = <span class=\"string\">'%(asctime)-15s Node[0] %(message)s'</span></div><div class=\"line\">logging.basicConfig(level=logging.DEBUG, format=head)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># create model</span></div><div class=\"line\">devs = mx.gpu(<span class=\"number\">0</span>)</div><div class=\"line\">network=get_lenet()</div><div class=\"line\">model = mx.model.FeedForward(</div><div class=\"line\">        <span class=\"comment\">#ctx                = devs,</span></div><div class=\"line\">        symbol             = network,</div><div class=\"line\">        num_epoch          = <span class=\"number\">4</span>,</div><div class=\"line\">        learning_rate      = <span class=\"number\">0.1</span>,</div><div class=\"line\">        momentum           = <span class=\"number\">0.9</span>,</div><div class=\"line\">        wd                 = <span class=\"number\">0.00001</span>,</div><div class=\"line\">        initializer        = mx.init.Xavier(factor_type=<span class=\"string\">\"in\"</span>, magnitude=<span class=\"number\">2.34</span>)</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\">eval_metrics = [<span class=\"string\">'accuracy'</span>]</div><div class=\"line\">model.fit(</div><div class=\"line\">\tX=train_iter,</div><div class=\"line\">\teval_metric        = eval_metrics,</div><div class=\"line\">\teval_data\t = val_iter</div><div class=\"line\">\t)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#predict</span></div><div class=\"line\">test = pd.read_csv(<span class=\"string\">\"../input/test.csv\"</span>).values</div><div class=\"line\">test_data = test.astype(<span class=\"string\">'float32'</span>)</div><div class=\"line\">test_data = np.array(test_data).reshape((<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>))</div><div class=\"line\">test_data[:]/= <span class=\"number\">256.0</span></div><div class=\"line\">test_iter = mx.io.NDArrayIter(test_data, batch_size=batch_size)</div><div class=\"line\"></div><div class=\"line\">pred = model.predict(X = test_iter)</div><div class=\"line\">pred = np.argsort(pred)</div><div class=\"line\">np.savetxt(<span class=\"string\">'submission_lenet.csv'</span>, np.c_[range(<span class=\"number\">1</span>,len(test)+<span class=\"number\">1</span>),pred[:,<span class=\"number\">9</span>]], delimiter=<span class=\"string\">','</span>, header = <span class=\"string\">'ImageId,Label'</span>, comments = <span class=\"string\">''</span>, fmt=<span class=\"string\">'%d'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-11-26 21:19:07,577 Node[0] Start training with [cpu(0)]</div><div class=\"line\">2016-11-26 21:21:21,802 Node[0] Epoch[0] Resetting Data Iterator</div><div class=\"line\">2016-11-26 21:21:21,802 Node[0] Epoch[0] Time cost=134.220</div><div class=\"line\">2016-11-26 21:21:24,613 Node[0] Epoch[0] Validation-accuracy=0.974000</div><div class=\"line\">2016-11-26 21:23:36,314 Node[0] Epoch[1] Resetting Data Iterator</div><div class=\"line\">2016-11-26 21:23:36,314 Node[0] Epoch[1] Time cost=131.700</div><div class=\"line\">2016-11-26 21:23:38,900 Node[0] Epoch[1] Validation-accuracy=0.988000</div><div class=\"line\">2016-11-26 21:25:48,668 Node[0] Epoch[2] Resetting Data Iterator</div><div class=\"line\">2016-11-26 21:25:48,669 Node[0] Epoch[2] Time cost=129.769</div><div class=\"line\">2016-11-26 21:25:51,246 Node[0] Epoch[2] Validation-accuracy=0.987500</div><div class=\"line\">2016-11-26 21:28:01,337 Node[0] Epoch[3] Resetting Data Iterator</div><div class=\"line\">2016-11-26 21:28:01,337 Node[0] Epoch[3] Time cost=130.091</div><div class=\"line\">2016-11-26 21:28:03,945 Node[0] Epoch[3] Validation-accuracy=0.988000</div></pre></td></tr></table></figure>\n<p>提交的准确率为0.98571</p>\n"},{"title":"机器学习基础系列：Logistic Regression","date":"2016-11-04T23:57:49.000Z","_content":"\n## 0. 介绍\n\n因为其实现简单分类时计算量非常小，速度很快，存储资源低而被广泛的应用在诸如广告、推荐系统中，可以说逻辑回归是应用最广泛的分类算法之一，原因大概有以下几个方面：\n--- LR模型原理简单，易于实现并且效果还不错。\n--- 大量互联网公司中的广告和推荐系统大量使用了CTR预估模型，而LR则是CTR的基本算法。\n\n## 1. 线性二分类问题\n\n\n\n\n\n","source":"_posts/20161105-logistic-regression.md","raw":"---\ntitle: 机器学习基础系列：Logistic Regression\ndate: 2016-11-05 07:57:49\ntags:\n    - 机器学习\ncategories:\n    - 机器学习\n---\n\n## 0. 介绍\n\n因为其实现简单分类时计算量非常小，速度很快，存储资源低而被广泛的应用在诸如广告、推荐系统中，可以说逻辑回归是应用最广泛的分类算法之一，原因大概有以下几个方面：\n--- LR模型原理简单，易于实现并且效果还不错。\n--- 大量互联网公司中的广告和推荐系统大量使用了CTR预估模型，而LR则是CTR的基本算法。\n\n## 1. 线性二分类问题\n\n\n\n\n\n","slug":"20161105-logistic-regression","published":1,"updated":"2016-11-26T09:28:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32rv5000n65s6ujhi41ga","content":"<h2 id=\"0-介绍\"><a href=\"#0-介绍\" class=\"headerlink\" title=\"0. 介绍\"></a>0. 介绍</h2><p>因为其实现简单分类时计算量非常小，速度很快，存储资源低而被广泛的应用在诸如广告、推荐系统中，可以说逻辑回归是应用最广泛的分类算法之一，原因大概有以下几个方面：<br>— LR模型原理简单，易于实现并且效果还不错。<br>— 大量互联网公司中的广告和推荐系统大量使用了CTR预估模型，而LR则是CTR的基本算法。</p>\n<h2 id=\"1-线性二分类问题\"><a href=\"#1-线性二分类问题\" class=\"headerlink\" title=\"1. 线性二分类问题\"></a>1. 线性二分类问题</h2>","excerpt":"","more":"<h2 id=\"0-介绍\"><a href=\"#0-介绍\" class=\"headerlink\" title=\"0. 介绍\"></a>0. 介绍</h2><p>因为其实现简单分类时计算量非常小，速度很快，存储资源低而被广泛的应用在诸如广告、推荐系统中，可以说逻辑回归是应用最广泛的分类算法之一，原因大概有以下几个方面：<br>— LR模型原理简单，易于实现并且效果还不错。<br>— 大量互联网公司中的广告和推荐系统大量使用了CTR预估模型，而LR则是CTR的基本算法。</p>\n<h2 id=\"1-线性二分类问题\"><a href=\"#1-线性二分类问题\" class=\"headerlink\" title=\"1. 线性二分类问题\"></a>1. 线性二分类问题</h2>"},{"title":"centos6安装tensoflow","date":"2016-12-05T12:48:57.000Z","_content":"\n# 0 升级python2.6\n\n系统默认安装的Python是2.6.6的，我们需要升级到Python2.7，用wget命令从官方下载源文件，然后解压进行编译\n\n```shell\nwget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz\ntar xvf Python-2.7.12.tgz\ncd Python-2.7.12\nmake && make install\nmv /usr/bin/python /usr/bin/python2.6.6\nln -s /usr/local/bin/python2.7 /usr/bin/python\n```\n\n然后编辑/usr/bin/yum，将第一行的#!/usr/bin/python修改成#!/usr/bin/python2.6.6\n现在执行yum命令已经不会出现之前的错误信息了。\n\n# 1 安装pip\n\n```shell\nwget https://bootstrap.pypa.io/get-pip.py\npython get-pip.py\n\nwhereis pip\nln -s /usr/local/bin/pip2.7 /usr/bin/pip\n```\n\n# 2 安装依赖的lib\n\n```shell\nsudo yum -y install epel-release\nsudo yum -y install gcc gcc-c++ python-pip python-devel atlas atlas-devel gcc-gfortran openssl-devel libffi-devel\npip install --upgrade numpy scipy wheel cryptography\n```\n\n由于CentOS6的系统安装了epel-release-latest-7.noarch.rpm 导致在使用yum命令时出现Error: xz compression not available问题。\n解决方法：\n\n```shell\n1.到http://ftp.riken.jp/Linux/fedora/epel/下载epel-release-latest-6.noarch.rpm\n2.卸载epel-release-latest-7.noarch.rpm：yum remove epel-release\n3.清空epel目录：rm -rf/var/cache/yum/x86_64/6/epel/\n4.安装epel6:rpm -ivhepel-release-latest-6.noarch.rpm\n```\n\n# 3 安装tensorflow\n\n```shell\nsudo pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.0rc0-cp27-none-linux_x86_64.whl\n```\n\n# 4 test\n\n```shell\nImportError: /lib64/libc.so.6: version `GLIBC_2.16' not found (required by /usr/local/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow.so)\nError importing tensorflow.  Unless you are using bazel,\nyou should not try to import tensorflow from its source directory;\nplease exit the tensorflow source tree, and relaunch your python interpreter\nfrom there.\n\n## 解决方法\n下载新版本glibc安装\n```\n","source":"_posts/20161205-centos6-install-tensoflow.md","raw":"---\ntitle: centos6安装tensoflow\ndate: 2016-12-05 20:48:57\ntags:\n    - tensoflow\ncategories:\n    - 深度学习\n---\n\n# 0 升级python2.6\n\n系统默认安装的Python是2.6.6的，我们需要升级到Python2.7，用wget命令从官方下载源文件，然后解压进行编译\n\n```shell\nwget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz\ntar xvf Python-2.7.12.tgz\ncd Python-2.7.12\nmake && make install\nmv /usr/bin/python /usr/bin/python2.6.6\nln -s /usr/local/bin/python2.7 /usr/bin/python\n```\n\n然后编辑/usr/bin/yum，将第一行的#!/usr/bin/python修改成#!/usr/bin/python2.6.6\n现在执行yum命令已经不会出现之前的错误信息了。\n\n# 1 安装pip\n\n```shell\nwget https://bootstrap.pypa.io/get-pip.py\npython get-pip.py\n\nwhereis pip\nln -s /usr/local/bin/pip2.7 /usr/bin/pip\n```\n\n# 2 安装依赖的lib\n\n```shell\nsudo yum -y install epel-release\nsudo yum -y install gcc gcc-c++ python-pip python-devel atlas atlas-devel gcc-gfortran openssl-devel libffi-devel\npip install --upgrade numpy scipy wheel cryptography\n```\n\n由于CentOS6的系统安装了epel-release-latest-7.noarch.rpm 导致在使用yum命令时出现Error: xz compression not available问题。\n解决方法：\n\n```shell\n1.到http://ftp.riken.jp/Linux/fedora/epel/下载epel-release-latest-6.noarch.rpm\n2.卸载epel-release-latest-7.noarch.rpm：yum remove epel-release\n3.清空epel目录：rm -rf/var/cache/yum/x86_64/6/epel/\n4.安装epel6:rpm -ivhepel-release-latest-6.noarch.rpm\n```\n\n# 3 安装tensorflow\n\n```shell\nsudo pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.0rc0-cp27-none-linux_x86_64.whl\n```\n\n# 4 test\n\n```shell\nImportError: /lib64/libc.so.6: version `GLIBC_2.16' not found (required by /usr/local/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow.so)\nError importing tensorflow.  Unless you are using bazel,\nyou should not try to import tensorflow from its source directory;\nplease exit the tensorflow source tree, and relaunch your python interpreter\nfrom there.\n\n## 解决方法\n下载新版本glibc安装\n```\n","slug":"20161205-centos6-install-tensoflow","published":1,"updated":"2016-12-05T14:12:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32rv7000p65s6ymph8q3s","content":"<h1 id=\"0-升级python2-6\"><a href=\"#0-升级python2-6\" class=\"headerlink\" title=\"0 升级python2.6\"></a>0 升级python2.6</h1><p>系统默认安装的Python是2.6.6的，我们需要升级到Python2.7，用wget命令从官方下载源文件，然后解压进行编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz</div><div class=\"line\">tar xvf Python-2.7.12.tgz</div><div class=\"line\">cd Python-2.7.12</div><div class=\"line\">make &amp;&amp; make install</div><div class=\"line\">mv /usr/bin/python /usr/bin/python2.6.6</div><div class=\"line\">ln -s /usr/local/bin/python2.7 /usr/bin/python</div></pre></td></tr></table></figure>\n<p>然后编辑/usr/bin/yum，将第一行的#!/usr/bin/python修改成#!/usr/bin/python2.6.6<br>现在执行yum命令已经不会出现之前的错误信息了。</p>\n<h1 id=\"1-安装pip\"><a href=\"#1-安装pip\" class=\"headerlink\" title=\"1 安装pip\"></a>1 安装pip</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://bootstrap.pypa.io/get-pip.py</div><div class=\"line\">python get-pip.py</div><div class=\"line\"></div><div class=\"line\">whereis pip</div><div class=\"line\">ln -s /usr/local/bin/pip2.7 /usr/bin/pip</div></pre></td></tr></table></figure>\n<h1 id=\"2-安装依赖的lib\"><a href=\"#2-安装依赖的lib\" class=\"headerlink\" title=\"2 安装依赖的lib\"></a>2 安装依赖的lib</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum -y install epel-release</div><div class=\"line\">sudo yum -y install gcc gcc-c++ python-pip python-devel atlas atlas-devel gcc-gfortran openssl-devel libffi-devel</div><div class=\"line\">pip install --upgrade numpy scipy wheel cryptography</div></pre></td></tr></table></figure>\n<p>由于CentOS6的系统安装了epel-release-latest-7.noarch.rpm 导致在使用yum命令时出现Error: xz compression not available问题。<br>解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.到http://ftp.riken.jp/Linux/fedora/epel/下载epel-release-latest-6.noarch.rpm</div><div class=\"line\">2.卸载epel-release-latest-7.noarch.rpm：yum remove epel-release</div><div class=\"line\">3.清空epel目录：rm -rf/var/cache/yum/x86_64/6/epel/</div><div class=\"line\">4.安装epel6:rpm -ivhepel-release-latest-6.noarch.rpm</div></pre></td></tr></table></figure>\n<h1 id=\"3-安装tensorflow\"><a href=\"#3-安装tensorflow\" class=\"headerlink\" title=\"3 安装tensorflow\"></a>3 安装tensorflow</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.0rc0-cp27-none-linux_x86_64.whl</div></pre></td></tr></table></figure>\n<h1 id=\"4-test\"><a href=\"#4-test\" class=\"headerlink\" title=\"4 test\"></a>4 test</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ImportError: /lib64/libc.so.6: version `GLIBC_2.16&apos; not found (required by /usr/local/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow.so)</div><div class=\"line\">Error importing tensorflow.  Unless you are using bazel,</div><div class=\"line\">you should not try to import tensorflow from its source directory;</div><div class=\"line\">please exit the tensorflow source tree, and relaunch your python interpreter</div><div class=\"line\">from there.</div><div class=\"line\"></div><div class=\"line\">## 解决方法</div><div class=\"line\">下载新版本glibc安装</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"0-升级python2-6\"><a href=\"#0-升级python2-6\" class=\"headerlink\" title=\"0 升级python2.6\"></a>0 升级python2.6</h1><p>系统默认安装的Python是2.6.6的，我们需要升级到Python2.7，用wget命令从官方下载源文件，然后解压进行编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz</div><div class=\"line\">tar xvf Python-2.7.12.tgz</div><div class=\"line\">cd Python-2.7.12</div><div class=\"line\">make &amp;&amp; make install</div><div class=\"line\">mv /usr/bin/python /usr/bin/python2.6.6</div><div class=\"line\">ln -s /usr/local/bin/python2.7 /usr/bin/python</div></pre></td></tr></table></figure>\n<p>然后编辑/usr/bin/yum，将第一行的#!/usr/bin/python修改成#!/usr/bin/python2.6.6<br>现在执行yum命令已经不会出现之前的错误信息了。</p>\n<h1 id=\"1-安装pip\"><a href=\"#1-安装pip\" class=\"headerlink\" title=\"1 安装pip\"></a>1 安装pip</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://bootstrap.pypa.io/get-pip.py</div><div class=\"line\">python get-pip.py</div><div class=\"line\"></div><div class=\"line\">whereis pip</div><div class=\"line\">ln -s /usr/local/bin/pip2.7 /usr/bin/pip</div></pre></td></tr></table></figure>\n<h1 id=\"2-安装依赖的lib\"><a href=\"#2-安装依赖的lib\" class=\"headerlink\" title=\"2 安装依赖的lib\"></a>2 安装依赖的lib</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum -y install epel-release</div><div class=\"line\">sudo yum -y install gcc gcc-c++ python-pip python-devel atlas atlas-devel gcc-gfortran openssl-devel libffi-devel</div><div class=\"line\">pip install --upgrade numpy scipy wheel cryptography</div></pre></td></tr></table></figure>\n<p>由于CentOS6的系统安装了epel-release-latest-7.noarch.rpm 导致在使用yum命令时出现Error: xz compression not available问题。<br>解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.到http://ftp.riken.jp/Linux/fedora/epel/下载epel-release-latest-6.noarch.rpm</div><div class=\"line\">2.卸载epel-release-latest-7.noarch.rpm：yum remove epel-release</div><div class=\"line\">3.清空epel目录：rm -rf/var/cache/yum/x86_64/6/epel/</div><div class=\"line\">4.安装epel6:rpm -ivhepel-release-latest-6.noarch.rpm</div></pre></td></tr></table></figure>\n<h1 id=\"3-安装tensorflow\"><a href=\"#3-安装tensorflow\" class=\"headerlink\" title=\"3 安装tensorflow\"></a>3 安装tensorflow</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.0rc0-cp27-none-linux_x86_64.whl</div></pre></td></tr></table></figure>\n<h1 id=\"4-test\"><a href=\"#4-test\" class=\"headerlink\" title=\"4 test\"></a>4 test</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ImportError: /lib64/libc.so.6: version `GLIBC_2.16&apos; not found (required by /usr/local/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow.so)</div><div class=\"line\">Error importing tensorflow.  Unless you are using bazel,</div><div class=\"line\">you should not try to import tensorflow from its source directory;</div><div class=\"line\">please exit the tensorflow source tree, and relaunch your python interpreter</div><div class=\"line\">from there.</div><div class=\"line\"></div><div class=\"line\">## 解决方法</div><div class=\"line\">下载新版本glibc安装</div></pre></td></tr></table></figure>\n"},{"title":"词向量应用","date":"2016-12-03T09:07:49.000Z","_content":"\n# 0 词向量\n\n自然语言理解的问题要转化为机器学习的问题，第一步就是要找一种方法把这些符号数学化。\n最直观最常用的词表示方法是 One-hot Representation，这种方法把每个词表示为一个很长的向量。这个向量的维度是词表大小，其中绝大多数元素为 0，只有一个维度的值为 1，这个维度就代表了当前的词。\n\n“话筒”表示为 [0 0 0 **1** 0 0 0 0 0 0 0 0 0 0 0 0 …]\n“麦克”表示为 [0 0 0 0 0 0 0 0 **1** 0 0 0 0 0 0 0 …]\n\n这种表示方法存在一个重要的问题就是“词汇鸿沟”现象：任意两个词之间都是孤立的。光从这两个向量中看不出两个词是否有关系，哪怕是话筒和麦克这样的同义词也不能幸免于难。\n于是，为了处理这个问题，Hinton早在1986年就提出了Distributed Representation 的表示方式。向量一般长成这个样子：[0.792, −0.177, −0.107, 0.109, −0.542, …]。维度以 50 维和 100 维比较常见。\n\n# 1 词向量的训练\n\n一个词要表示成上述一个向量是要经过一番训练的，训练方法较多，word2vec是其中一种。word2vec是google开源的做词嵌入（word embedding）的开源工具。 \n简单的说，它在给定的语料库上训练一个模型，然后会输出所有出现在语料库上的单词的向量表示，这个向量称为\"word embedding\"。\n基于这个向量表示，可以计算词与词之间的关系，例如相似性(同义词等)，语义关联性（中国 - 北京 = 英国 - 伦敦），还可以进行词的聚类等。\n\n## 1.1 word2vec使用\n\n[下载源码](https://code.google.com/archive/p/word2vec/source/default/source)\nmake编译后可以得到几个可执行文件，运行demo-word.sh，下载demo数据并进行训练。\n\n```shell\n./word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15\n```\n\n生成结果文件vectors.bin 中，运行\n```shell\n./distance vectors.bin\n```\n\n输入词，返回相似的词以及相似度。\n\n# 3 词向量的应用\n\n词向量的表示，可以类比到工业应用上许多场景，可以很好的解决相似度、聚类等相关问题。\n\n## 3.1 社交网络推荐\n\nword2vec中两个词的相似度可以直接通过余弦等相似度算法来衡量，可以将doc和word定义为\n\n```text\ndoc  -> 根据每一个用户关注用户的顺序，生成doc\nword -> 被关注的用户\n```\n\n由于用户量很大，可以适当的清洗掉一些将关注数比较少的或者太多的doc。\n\n## 3.2 计算item的相似度\n\n在App推荐的场景中，根据浏览/收藏/下载/安装等行为，可以将app看做词，将每一个用户看做一个文档，通过word2vec将其训练为一个向量。\n视频推荐场景下同样可行。同样的，可以推广到计算广告中，根据用户的点击广告的点击序列，将每一个广告变为一个向量。\n\n\n\n","source":"_posts/20161203-word2vec-usage-in-recommendation-system.md","raw":"---\ntitle: 词向量应用\ndate: 2016-12-03 17:07:49\ntags:\n    - word2vec\ncategories:\n    - 机器学习\n---\n\n# 0 词向量\n\n自然语言理解的问题要转化为机器学习的问题，第一步就是要找一种方法把这些符号数学化。\n最直观最常用的词表示方法是 One-hot Representation，这种方法把每个词表示为一个很长的向量。这个向量的维度是词表大小，其中绝大多数元素为 0，只有一个维度的值为 1，这个维度就代表了当前的词。\n\n“话筒”表示为 [0 0 0 **1** 0 0 0 0 0 0 0 0 0 0 0 0 …]\n“麦克”表示为 [0 0 0 0 0 0 0 0 **1** 0 0 0 0 0 0 0 …]\n\n这种表示方法存在一个重要的问题就是“词汇鸿沟”现象：任意两个词之间都是孤立的。光从这两个向量中看不出两个词是否有关系，哪怕是话筒和麦克这样的同义词也不能幸免于难。\n于是，为了处理这个问题，Hinton早在1986年就提出了Distributed Representation 的表示方式。向量一般长成这个样子：[0.792, −0.177, −0.107, 0.109, −0.542, …]。维度以 50 维和 100 维比较常见。\n\n# 1 词向量的训练\n\n一个词要表示成上述一个向量是要经过一番训练的，训练方法较多，word2vec是其中一种。word2vec是google开源的做词嵌入（word embedding）的开源工具。 \n简单的说，它在给定的语料库上训练一个模型，然后会输出所有出现在语料库上的单词的向量表示，这个向量称为\"word embedding\"。\n基于这个向量表示，可以计算词与词之间的关系，例如相似性(同义词等)，语义关联性（中国 - 北京 = 英国 - 伦敦），还可以进行词的聚类等。\n\n## 1.1 word2vec使用\n\n[下载源码](https://code.google.com/archive/p/word2vec/source/default/source)\nmake编译后可以得到几个可执行文件，运行demo-word.sh，下载demo数据并进行训练。\n\n```shell\n./word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15\n```\n\n生成结果文件vectors.bin 中，运行\n```shell\n./distance vectors.bin\n```\n\n输入词，返回相似的词以及相似度。\n\n# 3 词向量的应用\n\n词向量的表示，可以类比到工业应用上许多场景，可以很好的解决相似度、聚类等相关问题。\n\n## 3.1 社交网络推荐\n\nword2vec中两个词的相似度可以直接通过余弦等相似度算法来衡量，可以将doc和word定义为\n\n```text\ndoc  -> 根据每一个用户关注用户的顺序，生成doc\nword -> 被关注的用户\n```\n\n由于用户量很大，可以适当的清洗掉一些将关注数比较少的或者太多的doc。\n\n## 3.2 计算item的相似度\n\n在App推荐的场景中，根据浏览/收藏/下载/安装等行为，可以将app看做词，将每一个用户看做一个文档，通过word2vec将其训练为一个向量。\n视频推荐场景下同样可行。同样的，可以推广到计算广告中，根据用户的点击广告的点击序列，将每一个广告变为一个向量。\n\n\n\n","slug":"20161203-word2vec-usage-in-recommendation-system","published":1,"updated":"2016-12-03T11:42:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32rva000t65s6gr3jf3y6","content":"<h1 id=\"0-词向量\"><a href=\"#0-词向量\" class=\"headerlink\" title=\"0 词向量\"></a>0 词向量</h1><p>自然语言理解的问题要转化为机器学习的问题，第一步就是要找一种方法把这些符号数学化。<br>最直观最常用的词表示方法是 One-hot Representation，这种方法把每个词表示为一个很长的向量。这个向量的维度是词表大小，其中绝大多数元素为 0，只有一个维度的值为 1，这个维度就代表了当前的词。</p>\n<p>“话筒”表示为 [0 0 0 <strong>1</strong> 0 0 0 0 0 0 0 0 0 0 0 0 …]<br>“麦克”表示为 [0 0 0 0 0 0 0 0 <strong>1</strong> 0 0 0 0 0 0 0 …]</p>\n<p>这种表示方法存在一个重要的问题就是“词汇鸿沟”现象：任意两个词之间都是孤立的。光从这两个向量中看不出两个词是否有关系，哪怕是话筒和麦克这样的同义词也不能幸免于难。<br>于是，为了处理这个问题，Hinton早在1986年就提出了Distributed Representation 的表示方式。向量一般长成这个样子：[0.792, −0.177, −0.107, 0.109, −0.542, …]。维度以 50 维和 100 维比较常见。</p>\n<h1 id=\"1-词向量的训练\"><a href=\"#1-词向量的训练\" class=\"headerlink\" title=\"1 词向量的训练\"></a>1 词向量的训练</h1><p>一个词要表示成上述一个向量是要经过一番训练的，训练方法较多，word2vec是其中一种。word2vec是google开源的做词嵌入（word embedding）的开源工具。<br>简单的说，它在给定的语料库上训练一个模型，然后会输出所有出现在语料库上的单词的向量表示，这个向量称为”word embedding”。<br>基于这个向量表示，可以计算词与词之间的关系，例如相似性(同义词等)，语义关联性（中国 - 北京 = 英国 - 伦敦），还可以进行词的聚类等。</p>\n<h2 id=\"1-1-word2vec使用\"><a href=\"#1-1-word2vec使用\" class=\"headerlink\" title=\"1.1 word2vec使用\"></a>1.1 word2vec使用</h2><p><a href=\"https://code.google.com/archive/p/word2vec/source/default/source\" target=\"_blank\" rel=\"external\">下载源码</a><br>make编译后可以得到几个可执行文件，运行demo-word.sh，下载demo数据并进行训练。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15</div></pre></td></tr></table></figure>\n<p>生成结果文件vectors.bin 中，运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./distance vectors.bin</div></pre></td></tr></table></figure></p>\n<p>输入词，返回相似的词以及相似度。</p>\n<h1 id=\"3-词向量的应用\"><a href=\"#3-词向量的应用\" class=\"headerlink\" title=\"3 词向量的应用\"></a>3 词向量的应用</h1><p>词向量的表示，可以类比到工业应用上许多场景，可以很好的解决相似度、聚类等相关问题。</p>\n<h2 id=\"3-1-社交网络推荐\"><a href=\"#3-1-社交网络推荐\" class=\"headerlink\" title=\"3.1 社交网络推荐\"></a>3.1 社交网络推荐</h2><p>word2vec中两个词的相似度可以直接通过余弦等相似度算法来衡量，可以将doc和word定义为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">doc  -&gt; 根据每一个用户关注用户的顺序，生成doc</div><div class=\"line\">word -&gt; 被关注的用户</div></pre></td></tr></table></figure>\n<p>由于用户量很大，可以适当的清洗掉一些将关注数比较少的或者太多的doc。</p>\n<h2 id=\"3-2-计算item的相似度\"><a href=\"#3-2-计算item的相似度\" class=\"headerlink\" title=\"3.2 计算item的相似度\"></a>3.2 计算item的相似度</h2><p>在App推荐的场景中，根据浏览/收藏/下载/安装等行为，可以将app看做词，将每一个用户看做一个文档，通过word2vec将其训练为一个向量。<br>视频推荐场景下同样可行。同样的，可以推广到计算广告中，根据用户的点击广告的点击序列，将每一个广告变为一个向量。</p>\n","excerpt":"","more":"<h1 id=\"0-词向量\"><a href=\"#0-词向量\" class=\"headerlink\" title=\"0 词向量\"></a>0 词向量</h1><p>自然语言理解的问题要转化为机器学习的问题，第一步就是要找一种方法把这些符号数学化。<br>最直观最常用的词表示方法是 One-hot Representation，这种方法把每个词表示为一个很长的向量。这个向量的维度是词表大小，其中绝大多数元素为 0，只有一个维度的值为 1，这个维度就代表了当前的词。</p>\n<p>“话筒”表示为 [0 0 0 <strong>1</strong> 0 0 0 0 0 0 0 0 0 0 0 0 …]<br>“麦克”表示为 [0 0 0 0 0 0 0 0 <strong>1</strong> 0 0 0 0 0 0 0 …]</p>\n<p>这种表示方法存在一个重要的问题就是“词汇鸿沟”现象：任意两个词之间都是孤立的。光从这两个向量中看不出两个词是否有关系，哪怕是话筒和麦克这样的同义词也不能幸免于难。<br>于是，为了处理这个问题，Hinton早在1986年就提出了Distributed Representation 的表示方式。向量一般长成这个样子：[0.792, −0.177, −0.107, 0.109, −0.542, …]。维度以 50 维和 100 维比较常见。</p>\n<h1 id=\"1-词向量的训练\"><a href=\"#1-词向量的训练\" class=\"headerlink\" title=\"1 词向量的训练\"></a>1 词向量的训练</h1><p>一个词要表示成上述一个向量是要经过一番训练的，训练方法较多，word2vec是其中一种。word2vec是google开源的做词嵌入（word embedding）的开源工具。<br>简单的说，它在给定的语料库上训练一个模型，然后会输出所有出现在语料库上的单词的向量表示，这个向量称为”word embedding”。<br>基于这个向量表示，可以计算词与词之间的关系，例如相似性(同义词等)，语义关联性（中国 - 北京 = 英国 - 伦敦），还可以进行词的聚类等。</p>\n<h2 id=\"1-1-word2vec使用\"><a href=\"#1-1-word2vec使用\" class=\"headerlink\" title=\"1.1 word2vec使用\"></a>1.1 word2vec使用</h2><p><a href=\"https://code.google.com/archive/p/word2vec/source/default/source\">下载源码</a><br>make编译后可以得到几个可执行文件，运行demo-word.sh，下载demo数据并进行训练。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15</div></pre></td></tr></table></figure>\n<p>生成结果文件vectors.bin 中，运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./distance vectors.bin</div></pre></td></tr></table></figure></p>\n<p>输入词，返回相似的词以及相似度。</p>\n<h1 id=\"3-词向量的应用\"><a href=\"#3-词向量的应用\" class=\"headerlink\" title=\"3 词向量的应用\"></a>3 词向量的应用</h1><p>词向量的表示，可以类比到工业应用上许多场景，可以很好的解决相似度、聚类等相关问题。</p>\n<h2 id=\"3-1-社交网络推荐\"><a href=\"#3-1-社交网络推荐\" class=\"headerlink\" title=\"3.1 社交网络推荐\"></a>3.1 社交网络推荐</h2><p>word2vec中两个词的相似度可以直接通过余弦等相似度算法来衡量，可以将doc和word定义为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">doc  -&gt; 根据每一个用户关注用户的顺序，生成doc</div><div class=\"line\">word -&gt; 被关注的用户</div></pre></td></tr></table></figure>\n<p>由于用户量很大，可以适当的清洗掉一些将关注数比较少的或者太多的doc。</p>\n<h2 id=\"3-2-计算item的相似度\"><a href=\"#3-2-计算item的相似度\" class=\"headerlink\" title=\"3.2 计算item的相似度\"></a>3.2 计算item的相似度</h2><p>在App推荐的场景中，根据浏览/收藏/下载/安装等行为，可以将app看做词，将每一个用户看做一个文档，通过word2vec将其训练为一个向量。<br>视频推荐场景下同样可行。同样的，可以推广到计算广告中，根据用户的点击广告的点击序列，将每一个广告变为一个向量。</p>\n"},{"title":"安装配置mysql","date":"2016-12-15T02:05:16.000Z","_content":"\n# 0 安装mysql\n\n```shell\nsudo yum install -y mysql-server mysql mysql-devel\nservice mysqld start\n```\n\n过程比较简单，可以直接mysq server启动了，如果需要修改mysql数据的存放目录，可以修改my.conf文件里相应的配置。\n```shell\n# 查看my.conf位置\nmysql --help | grep my.cnf\nvi /your/path/my.conf\n```\n\n修改datadir等相应的内容，重启server\n\n# 账号设置\n\nmysql数据库安装完以后只会有一个root管理员账号，但是此时的root账号还并没有为其设置密码，需要设置。\n\n```shell\n/usr/bin/mysqladmin -u root password 'new-password'　　// 为root账号设置密码\n```\n## 添加账号并授权\n\n添加一个test账号，并授权\n```shell\nCREATE USER test IDENTIFIED BY PASSWORD('password');\nGRANT ALL PRIVILEGES ON *.* TO 'test'@'%';\nFLUSH PRIVILEGES;\n```\n## 忘记root密码\n\nroot密码是管理整个mysql数据库的入口，所以忘记时需要找回。\n```shell\n#杀掉进程 \nkillall -TERM mysqld。\n#启动 MySQL\nbin/safe_mysqld --skip-grant-tables &\n```\n\n这样就可以不需要密码进行mysql\n\n```shell\n>use mysql\n>update user set password=password(\"new_pass\") where user=\"root\";\n>flush privileges;\n```\n\n\n","source":"_posts/20161215-install-and-setting-mysql-sever.md","raw":"---\ntitle: 安装配置mysql\ndate: 2016-12-15 10:05:16\ntags:\n    - mysql\ncategories:\n    - note\n---\n\n# 0 安装mysql\n\n```shell\nsudo yum install -y mysql-server mysql mysql-devel\nservice mysqld start\n```\n\n过程比较简单，可以直接mysq server启动了，如果需要修改mysql数据的存放目录，可以修改my.conf文件里相应的配置。\n```shell\n# 查看my.conf位置\nmysql --help | grep my.cnf\nvi /your/path/my.conf\n```\n\n修改datadir等相应的内容，重启server\n\n# 账号设置\n\nmysql数据库安装完以后只会有一个root管理员账号，但是此时的root账号还并没有为其设置密码，需要设置。\n\n```shell\n/usr/bin/mysqladmin -u root password 'new-password'　　// 为root账号设置密码\n```\n## 添加账号并授权\n\n添加一个test账号，并授权\n```shell\nCREATE USER test IDENTIFIED BY PASSWORD('password');\nGRANT ALL PRIVILEGES ON *.* TO 'test'@'%';\nFLUSH PRIVILEGES;\n```\n## 忘记root密码\n\nroot密码是管理整个mysql数据库的入口，所以忘记时需要找回。\n```shell\n#杀掉进程 \nkillall -TERM mysqld。\n#启动 MySQL\nbin/safe_mysqld --skip-grant-tables &\n```\n\n这样就可以不需要密码进行mysql\n\n```shell\n>use mysql\n>update user set password=password(\"new_pass\") where user=\"root\";\n>flush privileges;\n```\n\n\n","slug":"20161215-install-and-setting-mysql-sever","published":1,"updated":"2016-12-18T04:34:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1p32rvc000u65s6gua0mcj5","content":"<h1 id=\"0-安装mysql\"><a href=\"#0-安装mysql\" class=\"headerlink\" title=\"0 安装mysql\"></a>0 安装mysql</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install -y mysql-server mysql mysql-devel</div><div class=\"line\">service mysqld start</div></pre></td></tr></table></figure>\n<p>过程比较简单，可以直接mysq server启动了，如果需要修改mysql数据的存放目录，可以修改my.conf文件里相应的配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看my.conf位置</div><div class=\"line\">mysql --help | grep my.cnf</div><div class=\"line\">vi /your/path/my.conf</div></pre></td></tr></table></figure></p>\n<p>修改datadir等相应的内容，重启server</p>\n<h1 id=\"账号设置\"><a href=\"#账号设置\" class=\"headerlink\" title=\"账号设置\"></a>账号设置</h1><p>mysql数据库安装完以后只会有一个root管理员账号，但是此时的root账号还并没有为其设置密码，需要设置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysqladmin -u root password &apos;new-password&apos;　　// 为root账号设置密码</div></pre></td></tr></table></figure>\n<h2 id=\"添加账号并授权\"><a href=\"#添加账号并授权\" class=\"headerlink\" title=\"添加账号并授权\"></a>添加账号并授权</h2><p>添加一个test账号，并授权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE USER test IDENTIFIED BY PASSWORD(&apos;password&apos;);</div><div class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;test&apos;@&apos;%&apos;;</div><div class=\"line\">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure></p>\n<h2 id=\"忘记root密码\"><a href=\"#忘记root密码\" class=\"headerlink\" title=\"忘记root密码\"></a>忘记root密码</h2><p>root密码是管理整个mysql数据库的入口，所以忘记时需要找回。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#杀掉进程 </div><div class=\"line\">killall -TERM mysqld。</div><div class=\"line\">#启动 MySQL</div><div class=\"line\">bin/safe_mysqld --skip-grant-tables &amp;</div></pre></td></tr></table></figure></p>\n<p>这样就可以不需要密码进行mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;use mysql</div><div class=\"line\">&gt;update user set password=password(&quot;new_pass&quot;) where user=&quot;root&quot;;</div><div class=\"line\">&gt;flush privileges;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"0-安装mysql\"><a href=\"#0-安装mysql\" class=\"headerlink\" title=\"0 安装mysql\"></a>0 安装mysql</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install -y mysql-server mysql mysql-devel</div><div class=\"line\">service mysqld start</div></pre></td></tr></table></figure>\n<p>过程比较简单，可以直接mysq server启动了，如果需要修改mysql数据的存放目录，可以修改my.conf文件里相应的配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看my.conf位置</div><div class=\"line\">mysql --help | grep my.cnf</div><div class=\"line\">vi /your/path/my.conf</div></pre></td></tr></table></figure></p>\n<p>修改datadir等相应的内容，重启server</p>\n<h1 id=\"账号设置\"><a href=\"#账号设置\" class=\"headerlink\" title=\"账号设置\"></a>账号设置</h1><p>mysql数据库安装完以后只会有一个root管理员账号，但是此时的root账号还并没有为其设置密码，需要设置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysqladmin -u root password &apos;new-password&apos;　　// 为root账号设置密码</div></pre></td></tr></table></figure>\n<h2 id=\"添加账号并授权\"><a href=\"#添加账号并授权\" class=\"headerlink\" title=\"添加账号并授权\"></a>添加账号并授权</h2><p>添加一个test账号，并授权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE USER test IDENTIFIED BY PASSWORD(&apos;password&apos;);</div><div class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;test&apos;@&apos;%&apos;;</div><div class=\"line\">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure></p>\n<h2 id=\"忘记root密码\"><a href=\"#忘记root密码\" class=\"headerlink\" title=\"忘记root密码\"></a>忘记root密码</h2><p>root密码是管理整个mysql数据库的入口，所以忘记时需要找回。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#杀掉进程 </div><div class=\"line\">killall -TERM mysqld。</div><div class=\"line\">#启动 MySQL</div><div class=\"line\">bin/safe_mysqld --skip-grant-tables &amp;</div></pre></td></tr></table></figure></p>\n<p>这样就可以不需要密码进行mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;use mysql</div><div class=\"line\">&gt;update user set password=password(&quot;new_pass&quot;) where user=&quot;root&quot;;</div><div class=\"line\">&gt;flush privileges;</div></pre></td></tr></table></figure>\n"},{"title":"c中指针的巧妙使用","date":"2017-04-19T14:28:58.000Z","_content":"\n# 19. Remove Nth Node From End of List\n\n题目中要求从一个链表中删除倒数第n个节点，主要考查两个方面的知识，双指针与链表删除操作。\n比较巧妙的是指针的指针last的使用，很值得学习，顺便复习一下指针的知识。\n\n```cpp\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        if (!head) {\n            return head;\n        }\n        ListNode* prev = head;\n        ListNode** last = &head;\n        for (int i=1; i<n; ++i) {\n            prev = prev->next;\n        }\n        while (prev->next != NULL) {\n            prev = prev->next;\n            last = &((*last)->next);\n        }\n        *last = (*last)->next;\n        return head;\n    }\n};\n```\n\n","source":"_posts/20170419-cpp-pointer-solution.md","raw":"---\ntitle: c中指针的巧妙使用\ndate: 2017-04-19 22:28:58\ntags: \n    - 指针\n    - 链表\ncategories:\n    - leetcode\n---\n\n# 19. Remove Nth Node From End of List\n\n题目中要求从一个链表中删除倒数第n个节点，主要考查两个方面的知识，双指针与链表删除操作。\n比较巧妙的是指针的指针last的使用，很值得学习，顺便复习一下指针的知识。\n\n```cpp\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        if (!head) {\n            return head;\n        }\n        ListNode* prev = head;\n        ListNode** last = &head;\n        for (int i=1; i<n; ++i) {\n            prev = prev->next;\n        }\n        while (prev->next != NULL) {\n            prev = prev->next;\n            last = &((*last)->next);\n        }\n        *last = (*last)->next;\n        return head;\n    }\n};\n```\n\n","slug":"20170419-cpp-pointer-solution","published":1,"updated":"2017-04-19T14:41:31.000Z","_id":"cj1p32rvh000y65s64asigjh3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"19-Remove-Nth-Node-From-End-of-List\"><a href=\"#19-Remove-Nth-Node-From-End-of-List\" class=\"headerlink\" title=\"19. Remove Nth Node From End of List\"></a>19. Remove Nth Node From End of List</h1><p>题目中要求从一个链表中删除倒数第n个节点，主要考查两个方面的知识，双指针与链表删除操作。<br>比较巧妙的是指针的指针last的使用，很值得学习，顺便复习一下指针的知识。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for singly-linked list.</div><div class=\"line\"> * struct ListNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     ListNode *next;</div><div class=\"line\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!head) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> head;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ListNode* prev = head;</div><div class=\"line\">        ListNode** last = &amp;head;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;n; ++i) &#123;</div><div class=\"line\">            prev = prev-&gt;next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span> (prev-&gt;next != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">            prev = prev-&gt;next;</div><div class=\"line\">            last = &amp;((*last)-&gt;next);</div><div class=\"line\">        &#125;</div><div class=\"line\">        *last = (*last)-&gt;next;</div><div class=\"line\">        <span class=\"keyword\">return</span> head;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"19-Remove-Nth-Node-From-End-of-List\"><a href=\"#19-Remove-Nth-Node-From-End-of-List\" class=\"headerlink\" title=\"19. Remove Nth Node From End of List\"></a>19. Remove Nth Node From End of List</h1><p>题目中要求从一个链表中删除倒数第n个节点，主要考查两个方面的知识，双指针与链表删除操作。<br>比较巧妙的是指针的指针last的使用，很值得学习，顺便复习一下指针的知识。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Definition for singly-linked list.</div><div class=\"line\"> * struct ListNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     ListNode *next;</div><div class=\"line\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!head) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> head;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ListNode* prev = head;</div><div class=\"line\">        ListNode** last = &amp;head;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;n; ++i) &#123;</div><div class=\"line\">            prev = prev-&gt;next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span> (prev-&gt;next != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">            prev = prev-&gt;next;</div><div class=\"line\">            last = &amp;((*last)-&gt;next);</div><div class=\"line\">        &#125;</div><div class=\"line\">        *last = (*last)-&gt;next;</div><div class=\"line\">        <span class=\"keyword\">return</span> head;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"title":"word2vec系列：入门基础","date":"2016-12-18T04:37:52.000Z","_content":"\n# 快速入门\n\n1、从http://word2vec.googlecode.com/svn/trunk/ 下载所有相关代码：\n一种方式是使用svn Checkout，可加代理进行check。\n另一种就是export to github，然后再github上下载，我选择第二种方式下载。\n\n2、运行make编译word2vec工具：（如果其中makefile文件后有.txt后缀，将其去掉）在当前目录下执行make进行编译，生成可执行文件(编译过程中报出很出Warning，暂且不管)；\n\n3、运行示例脚本：./demo-word.sh 看一下./demo-word.sh的内容，大致执行了3步操作\n\n从http://mattmahoney.net/dc/text8.zip 下载了一个文件text8 ( 一个解压后不到100M的txt文件，可自己下载并解压放到同级目录下)；\n使用文件text8进行训练，训练过程比较长；\n执行word2vec生成词向量到 vectors.bin文件中，（速度比较快，几分钟的事情）\n在demo-word.sh中有如下命令\n\n运行结果如图：\n","source":"_posts/20161218-word2vec_page_1.md","raw":"---\ntitle: word2vec系列：入门基础\ndate: 2016-12-18 12:37:52\ntags:\n    - word2vec\ncategories:\n    - 深度学习\n---\n\n# 快速入门\n\n1、从http://word2vec.googlecode.com/svn/trunk/ 下载所有相关代码：\n一种方式是使用svn Checkout，可加代理进行check。\n另一种就是export to github，然后再github上下载，我选择第二种方式下载。\n\n2、运行make编译word2vec工具：（如果其中makefile文件后有.txt后缀，将其去掉）在当前目录下执行make进行编译，生成可执行文件(编译过程中报出很出Warning，暂且不管)；\n\n3、运行示例脚本：./demo-word.sh 看一下./demo-word.sh的内容，大致执行了3步操作\n\n从http://mattmahoney.net/dc/text8.zip 下载了一个文件text8 ( 一个解压后不到100M的txt文件，可自己下载并解压放到同级目录下)；\n使用文件text8进行训练，训练过程比较长；\n执行word2vec生成词向量到 vectors.bin文件中，（速度比较快，几分钟的事情）\n在demo-word.sh中有如下命令\n\n运行结果如图：\n","slug":"20161218-word2vec_page_1","published":1,"updated":"2017-04-19T14:42:31.000Z","_id":"cj1p32rvi000z65s61sgnq98l","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h1><p>1、从<a href=\"http://word2vec.googlecode.com/svn/trunk/\" target=\"_blank\" rel=\"external\">http://word2vec.googlecode.com/svn/trunk/</a> 下载所有相关代码：<br>一种方式是使用svn Checkout，可加代理进行check。<br>另一种就是export to github，然后再github上下载，我选择第二种方式下载。</p>\n<p>2、运行make编译word2vec工具：（如果其中makefile文件后有.txt后缀，将其去掉）在当前目录下执行make进行编译，生成可执行文件(编译过程中报出很出Warning，暂且不管)；</p>\n<p>3、运行示例脚本：./demo-word.sh 看一下./demo-word.sh的内容，大致执行了3步操作</p>\n<p>从<a href=\"http://mattmahoney.net/dc/text8.zip\" target=\"_blank\" rel=\"external\">http://mattmahoney.net/dc/text8.zip</a> 下载了一个文件text8 ( 一个解压后不到100M的txt文件，可自己下载并解压放到同级目录下)；<br>使用文件text8进行训练，训练过程比较长；<br>执行word2vec生成词向量到 vectors.bin文件中，（速度比较快，几分钟的事情）<br>在demo-word.sh中有如下命令</p>\n<p>运行结果如图：</p>\n","excerpt":"","more":"<h1 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h1><p>1、从<a href=\"http://word2vec.googlecode.com/svn/trunk/\">http://word2vec.googlecode.com/svn/trunk/</a> 下载所有相关代码：<br>一种方式是使用svn Checkout，可加代理进行check。<br>另一种就是export to github，然后再github上下载，我选择第二种方式下载。</p>\n<p>2、运行make编译word2vec工具：（如果其中makefile文件后有.txt后缀，将其去掉）在当前目录下执行make进行编译，生成可执行文件(编译过程中报出很出Warning，暂且不管)；</p>\n<p>3、运行示例脚本：./demo-word.sh 看一下./demo-word.sh的内容，大致执行了3步操作</p>\n<p>从<a href=\"http://mattmahoney.net/dc/text8.zip\">http://mattmahoney.net/dc/text8.zip</a> 下载了一个文件text8 ( 一个解压后不到100M的txt文件，可自己下载并解压放到同级目录下)；<br>使用文件text8进行训练，训练过程比较长；<br>执行word2vec生成词向量到 vectors.bin文件中，（速度比较快，几分钟的事情）<br>在demo-word.sh中有如下命令</p>\n<p>运行结果如图：</p>\n"},{"title":"401. Binary Watch","date":"2017-05-25T14:26:58.000Z","_content":"\n# 401. Binary Watch\n\n## 使用backtracking的方法\n\n穷举所有的可能，注意hour < 12, minute < 60\n递归实现,退出条件是当num为0时，生成相应的时间。\n\n```cpp\nclass Solution {\n    vector<int> hour = {1,2,4,8};\n    vector<int> minute = {1,2,4,8,16,32};\npublic:\n    vector<string> readBinaryWatch(int num) {\n        vector<string> res;\n        helper(res, make_pair(0,0), num, 0);\n        return res;\n    }\n    \nprivate:\n    void helper(vector<string>& res, pair<int, int> time, int num, int start_point) {\n        if (num == 0) {\n            string time_str = to_string(time.first) +  (time.second < 10 ?  \":0\" : \":\") + to_string(time.second);\n            res.push_back(time_str);\n        }\n        for (int i = start_point; i < hour.size() + minute.size(); ++i) {\n            if (i < hour.size()) {\n                time.first += hour[i];\n                if (time.first < 12) {\n                    helper(res, time, num - 1, i + 1);\n                }\n                time.first -= hour[i];\n            } else {\n                time.second += minute[i - hour.size()];\n                if (time.second < 60) {\n                    helper(res, time, num - 1, i + 1);\n                }\n                time.second -= minute[i - hour.size()];\n            }\n        }\n    }\n};\n```\n\n","source":"_posts/20170525-backtracking-401.md","raw":"---\ntitle: 401. Binary Watch\ndate: 2017-05-25 22:26:58\ntags: \n    - backtracking\ncategories:\n    - leetcode\n---\n\n# 401. Binary Watch\n\n## 使用backtracking的方法\n\n穷举所有的可能，注意hour < 12, minute < 60\n递归实现,退出条件是当num为0时，生成相应的时间。\n\n```cpp\nclass Solution {\n    vector<int> hour = {1,2,4,8};\n    vector<int> minute = {1,2,4,8,16,32};\npublic:\n    vector<string> readBinaryWatch(int num) {\n        vector<string> res;\n        helper(res, make_pair(0,0), num, 0);\n        return res;\n    }\n    \nprivate:\n    void helper(vector<string>& res, pair<int, int> time, int num, int start_point) {\n        if (num == 0) {\n            string time_str = to_string(time.first) +  (time.second < 10 ?  \":0\" : \":\") + to_string(time.second);\n            res.push_back(time_str);\n        }\n        for (int i = start_point; i < hour.size() + minute.size(); ++i) {\n            if (i < hour.size()) {\n                time.first += hour[i];\n                if (time.first < 12) {\n                    helper(res, time, num - 1, i + 1);\n                }\n                time.first -= hour[i];\n            } else {\n                time.second += minute[i - hour.size()];\n                if (time.second < 60) {\n                    helper(res, time, num - 1, i + 1);\n                }\n                time.second -= minute[i - hour.size()];\n            }\n        }\n    }\n};\n```\n\n","slug":"20170525-backtracking-401","published":1,"updated":"2017-05-25T15:16:09.000Z","_id":"cj34k6kep00002qz742tkmq3m","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"401-Binary-Watch\"><a href=\"#401-Binary-Watch\" class=\"headerlink\" title=\"401. Binary Watch\"></a>401. Binary Watch</h1><h2 id=\"使用backtracking的方法\"><a href=\"#使用backtracking的方法\" class=\"headerlink\" title=\"使用backtracking的方法\"></a>使用backtracking的方法</h2><p>穷举所有的可能，注意hour &lt; 12, minute &lt; 60<br>递归实现,退出条件是当num为0时，生成相应的时间。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; hour = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>&#125;;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minute = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">16</span>,<span class=\"number\">32</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; readBinaryWatch(<span class=\"keyword\">int</span> num) &#123;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; res;</div><div class=\"line\">        helper(res, make_pair(<span class=\"number\">0</span>,<span class=\"number\">0</span>), num, <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> res;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; res, pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; time, <span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> start_point)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">string</span> time_str = to_string(time.first) +  (time.second &lt; <span class=\"number\">10</span> ?  <span class=\"string\">\":0\"</span> : <span class=\"string\">\":\"</span>) + to_string(time.second);</div><div class=\"line\">            res.push_back(time_str);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start_point; i &lt; hour.size() + minute.size(); ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &lt; hour.size()) &#123;</div><div class=\"line\">                time.first += hour[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (time.first &lt; <span class=\"number\">12</span>) &#123;</div><div class=\"line\">                    helper(res, time, num - <span class=\"number\">1</span>, i + <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                time.first -= hour[i];</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                time.second += minute[i - hour.size()];</div><div class=\"line\">                <span class=\"keyword\">if</span> (time.second &lt; <span class=\"number\">60</span>) &#123;</div><div class=\"line\">                    helper(res, time, num - <span class=\"number\">1</span>, i + <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                time.second -= minute[i - hour.size()];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"401-Binary-Watch\"><a href=\"#401-Binary-Watch\" class=\"headerlink\" title=\"401. Binary Watch\"></a>401. Binary Watch</h1><h2 id=\"使用backtracking的方法\"><a href=\"#使用backtracking的方法\" class=\"headerlink\" title=\"使用backtracking的方法\"></a>使用backtracking的方法</h2><p>穷举所有的可能，注意hour &lt; 12, minute &lt; 60<br>递归实现,退出条件是当num为0时，生成相应的时间。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; hour = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>&#125;;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minute = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">16</span>,<span class=\"number\">32</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; readBinaryWatch(<span class=\"keyword\">int</span> num) &#123;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; res;</div><div class=\"line\">        helper(res, make_pair(<span class=\"number\">0</span>,<span class=\"number\">0</span>), num, <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> res;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; res, pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; time, <span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> start_point)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">string</span> time_str = to_string(time.first) +  (time.second &lt; <span class=\"number\">10</span> ?  <span class=\"string\">\":0\"</span> : <span class=\"string\">\":\"</span>) + to_string(time.second);</div><div class=\"line\">            res.push_back(time_str);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start_point; i &lt; hour.size() + minute.size(); ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &lt; hour.size()) &#123;</div><div class=\"line\">                time.first += hour[i];</div><div class=\"line\">                <span class=\"keyword\">if</span> (time.first &lt; <span class=\"number\">12</span>) &#123;</div><div class=\"line\">                    helper(res, time, num - <span class=\"number\">1</span>, i + <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                time.first -= hour[i];</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                time.second += minute[i - hour.size()];</div><div class=\"line\">                <span class=\"keyword\">if</span> (time.second &lt; <span class=\"number\">60</span>) &#123;</div><div class=\"line\">                    helper(res, time, num - <span class=\"number\">1</span>, i + <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                time.second -= minute[i - hour.size()];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"title":"Python Tips","date":"2017-11-24T11:06:58.000Z","_content":"\n# Python Tips\n\n## Python 的函数参数传递\n\nPython中有可变对象（比如列表List）和不可变对象（比如字符串），所以在参数传递时分为两种情况：\n对于不可变对象作为函数参数，相当于C系语言的值传递；\n对于可变对象作为函数参数，相当于C系语言的引用传递。\n\n```python\nnum = {1:2}\nn = 2\ndef change(num, n):\n    num[1] = 1\n    n = 1\n\nprint num\nprint n\n```\n如例子中的参数，num会被修改，而n则不会被值成1\n假如需要对可变对象进行计算，不修改原有值，可以使用copy方法，如果参数内容仍然是可变参数时，则需要使用deepcopy方法\n\n```python\nimport copy\n\nnum = {1:[2,3]}\n\ndef change(num):\n    num_copy = num\n    num_copy[1] = [2,2]\n\ndef change_copy(num):\n    num_copy = copy.deepcopy(num)\n    num_copy[1] = [2,2]\n\nchange_copy(num)\nprint num\nchange(num)\nprint num\n\n\n```\n","source":"_posts/20171124-python-tips.md","raw":"---\ntitle: Python Tips\ndate: 2017-11-24 19:06:58\ntags: \n    - Python\ncategories:\n    - Python\n---\n\n# Python Tips\n\n## Python 的函数参数传递\n\nPython中有可变对象（比如列表List）和不可变对象（比如字符串），所以在参数传递时分为两种情况：\n对于不可变对象作为函数参数，相当于C系语言的值传递；\n对于可变对象作为函数参数，相当于C系语言的引用传递。\n\n```python\nnum = {1:2}\nn = 2\ndef change(num, n):\n    num[1] = 1\n    n = 1\n\nprint num\nprint n\n```\n如例子中的参数，num会被修改，而n则不会被值成1\n假如需要对可变对象进行计算，不修改原有值，可以使用copy方法，如果参数内容仍然是可变参数时，则需要使用deepcopy方法\n\n```python\nimport copy\n\nnum = {1:[2,3]}\n\ndef change(num):\n    num_copy = num\n    num_copy[1] = [2,2]\n\ndef change_copy(num):\n    num_copy = copy.deepcopy(num)\n    num_copy[1] = [2,2]\n\nchange_copy(num)\nprint num\nchange(num)\nprint num\n\n\n```\n","slug":"20171124-python-tips","published":1,"updated":"2017-11-24T11:23:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadtkl9c0000ciz76h4e5xqi","content":"<h1 id=\"Python-Tips\"><a href=\"#Python-Tips\" class=\"headerlink\" title=\"Python Tips\"></a>Python Tips</h1><h2 id=\"Python-的函数参数传递\"><a href=\"#Python-的函数参数传递\" class=\"headerlink\" title=\"Python 的函数参数传递\"></a>Python 的函数参数传递</h2><p>Python中有可变对象（比如列表List）和不可变对象（比如字符串），所以在参数传递时分为两种情况：<br>对于不可变对象作为函数参数，相当于C系语言的值传递；<br>对于可变对象作为函数参数，相当于C系语言的引用传递。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">num = &#123;<span class=\"number\">1</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\">n = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(num, n)</span>:</span></div><div class=\"line\">    num[<span class=\"number\">1</span>] = <span class=\"number\">1</span></div><div class=\"line\">    n = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> num</div><div class=\"line\"><span class=\"keyword\">print</span> n</div></pre></td></tr></table></figure>\n<p>如例子中的参数，num会被修改，而n则不会被值成1<br>假如需要对可变对象进行计算，不修改原有值，可以使用copy方法，如果参数内容仍然是可变参数时，则需要使用deepcopy方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> copy</div><div class=\"line\"></div><div class=\"line\">num = &#123;<span class=\"number\">1</span>:[<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(num)</span>:</span></div><div class=\"line\">    num_copy = num</div><div class=\"line\">    num_copy[<span class=\"number\">1</span>] = [<span class=\"number\">2</span>,<span class=\"number\">2</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change_copy</span><span class=\"params\">(num)</span>:</span></div><div class=\"line\">    num_copy = copy.deepcopy(num)</div><div class=\"line\">    num_copy[<span class=\"number\">1</span>] = [<span class=\"number\">2</span>,<span class=\"number\">2</span>]</div><div class=\"line\"></div><div class=\"line\">change_copy(num)</div><div class=\"line\"><span class=\"keyword\">print</span> num</div><div class=\"line\">change(num)</div><div class=\"line\"><span class=\"keyword\">print</span> num</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Python-Tips\"><a href=\"#Python-Tips\" class=\"headerlink\" title=\"Python Tips\"></a>Python Tips</h1><h2 id=\"Python-的函数参数传递\"><a href=\"#Python-的函数参数传递\" class=\"headerlink\" title=\"Python 的函数参数传递\"></a>Python 的函数参数传递</h2><p>Python中有可变对象（比如列表List）和不可变对象（比如字符串），所以在参数传递时分为两种情况：<br>对于不可变对象作为函数参数，相当于C系语言的值传递；<br>对于可变对象作为函数参数，相当于C系语言的引用传递。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">num = &#123;<span class=\"number\">1</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\">n = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(num, n)</span>:</span></div><div class=\"line\">    num[<span class=\"number\">1</span>] = <span class=\"number\">1</span></div><div class=\"line\">    n = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> num</div><div class=\"line\"><span class=\"keyword\">print</span> n</div></pre></td></tr></table></figure>\n<p>如例子中的参数，num会被修改，而n则不会被值成1<br>假如需要对可变对象进行计算，不修改原有值，可以使用copy方法，如果参数内容仍然是可变参数时，则需要使用deepcopy方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> copy</div><div class=\"line\"></div><div class=\"line\">num = &#123;<span class=\"number\">1</span>:[<span class=\"number\">2</span>,<span class=\"number\">3</span>]&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(num)</span>:</span></div><div class=\"line\">    num_copy = num</div><div class=\"line\">    num_copy[<span class=\"number\">1</span>] = [<span class=\"number\">2</span>,<span class=\"number\">2</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change_copy</span><span class=\"params\">(num)</span>:</span></div><div class=\"line\">    num_copy = copy.deepcopy(num)</div><div class=\"line\">    num_copy[<span class=\"number\">1</span>] = [<span class=\"number\">2</span>,<span class=\"number\">2</span>]</div><div class=\"line\"></div><div class=\"line\">change_copy(num)</div><div class=\"line\"><span class=\"keyword\">print</span> num</div><div class=\"line\">change(num)</div><div class=\"line\"><span class=\"keyword\">print</span> num</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1p32ru6000165s62fx6fj39","category_id":"cj1p32ruj000565s66e5pwpsf","_id":"cj1p32ruy000d65s61ex2eaue"},{"post_id":"cj1p32ruc000365s6zwjt4i66","category_id":"cj1p32rur000a65s6cgarmh2o","_id":"cj1p32rv4000j65s65mp3osiy"},{"post_id":"cj1p32ruk000665s6elo13vd6","category_id":"cj1p32rv0000g65s64lb1wuzu","_id":"cj1p32rv8000q65s6xjaow9sc"},{"post_id":"cj1p32rum000765s6uqjl55z4","category_id":"cj1p32rv5000l65s6i39abltb","_id":"cj1p32rvf000v65s6o6d8kotw"},{"post_id":"cj1p32run000965s6ancf2oaa","category_id":"cj1p32rur000a65s6cgarmh2o","_id":"cj1p32rvj001065s608mg5fz9"},{"post_id":"cj1p32ruz000f65s62eynskz0","category_id":"cj1p32rv5000l65s6i39abltb","_id":"cj1p32rvk001465s6vo2ilw21"},{"post_id":"cj1p32rv0000h65s6qwjilt5k","category_id":"cj1p32rvj001165s6efse6tte","_id":"cj1p32rvo001a65s6bjybr88u"},{"post_id":"cj1p32rv2000i65s64uqj3aev","category_id":"cj1p32rvj001165s6efse6tte","_id":"cj1p32rvs001e65s6ayq6j72s"},{"post_id":"cj1p32rv5000n65s6ujhi41ga","category_id":"cj1p32rvp001b65s61bcru32t","_id":"cj1p32rvu001h65s6s2jyxquz"},{"post_id":"cj1p32rv7000p65s6ymph8q3s","category_id":"cj1p32rvj001165s6efse6tte","_id":"cj1p32rvv001l65s6qr97rq6j"},{"post_id":"cj1p32rva000t65s6gr3jf3y6","category_id":"cj1p32rvp001b65s61bcru32t","_id":"cj1p32rvy001p65s6ksyqhqbd"},{"post_id":"cj1p32rvc000u65s6gua0mcj5","category_id":"cj1p32rvv001m65s6ol1jr2f1","_id":"cj1p32rw0001t65s6vqo9x1om"},{"post_id":"cj1p32rvi000z65s61sgnq98l","category_id":"cj1p32rvj001165s6efse6tte","_id":"cj1p32rw2002065s6gptaezq7"},{"post_id":"cj1p32rvh000y65s64asigjh3","category_id":"cj1p34zv30001fss6zltcoud3","_id":"cj1p34zv50003fss6ovsoetag"},{"post_id":"cj34k6kep00002qz742tkmq3m","category_id":"cj1p34zv30001fss6zltcoud3","_id":"cj34k6kf600022qz7cqb01z5g"},{"post_id":"cjadtkl9c0000ciz76h4e5xqi","category_id":"cjadtkl9r0002ciz7swkzqjv1","_id":"cjadtkl9t0004ciz7z5otbosq"}],"PostTag":[{"post_id":"cj1p32ru6000165s62fx6fj39","tag_id":"cj1p32rud000465s6840pea8s","_id":"cj1p32rut000b65s6wxgj9ufy"},{"post_id":"cj1p32ruc000365s6zwjt4i66","tag_id":"cj1p32rud000465s6840pea8s","_id":"cj1p32rv5000m65s6sdr8s3gz"},{"post_id":"cj1p32ruc000365s6zwjt4i66","tag_id":"cj1p32ruy000e65s6doc9e9q4","_id":"cj1p32rv6000o65s6plw1dxkr"},{"post_id":"cj1p32ruk000665s6elo13vd6","tag_id":"cj1p32rv4000k65s6uo4pqm22","_id":"cj1p32rvk001365s64tznml1m"},{"post_id":"cj1p32ruk000665s6elo13vd6","tag_id":"cj1p32rv8000r65s61laj99u7","_id":"cj1p32rvk001565s6m2tmmm6n"},{"post_id":"cj1p32ruk000665s6elo13vd6","tag_id":"cj1p32rvf000w65s65how7tn6","_id":"cj1p32rvm001865s6n3owcvsx"},{"post_id":"cj1p32rum000765s6uqjl55z4","tag_id":"cj1p32rvj001265s6sv4zkjv8","_id":"cj1p32rvn001965s6gytqvp23"},{"post_id":"cj1p32run000965s6ancf2oaa","tag_id":"cj1p32rvl001765s6hpvoakij","_id":"cj1p32rvs001d65s65k0usli6"},{"post_id":"cj1p32ruz000f65s62eynskz0","tag_id":"cj1p32rvj001265s6sv4zkjv8","_id":"cj1p32rvv001k65s692axj6gr"},{"post_id":"cj1p32ruz000f65s62eynskz0","tag_id":"cj1p32rvt001g65s6d3ohuxhh","_id":"cj1p32rvv001n65s692me0sps"},{"post_id":"cj1p32rv0000h65s6qwjilt5k","tag_id":"cj1p32rvu001j65s6no33fm1w","_id":"cj1p32rw0001s65s6ryiclvi5"},{"post_id":"cj1p32rv0000h65s6qwjilt5k","tag_id":"cj1p32rvx001o65s6jcwj3c81","_id":"cj1p32rw1001v65s6e75tctod"},{"post_id":"cj1p32rv2000i65s64uqj3aev","tag_id":"cj1p32rvx001o65s6jcwj3c81","_id":"cj1p32rw2001z65s6gjmbbfhd"},{"post_id":"cj1p32rv2000i65s64uqj3aev","tag_id":"cj1p32rw1001w65s6yrs1nvzt","_id":"cj1p32rw3002165s6lc6apw25"},{"post_id":"cj1p32rv5000n65s6ujhi41ga","tag_id":"cj1p32rw2001y65s60qekd1mt","_id":"cj1p32rw5002365s6uuekwfmt"},{"post_id":"cj1p32rv7000p65s6ymph8q3s","tag_id":"cj1p32rw3002265s6xfqwi8r0","_id":"cj1p32rw8002565s6tck65s81"},{"post_id":"cj1p32rva000t65s6gr3jf3y6","tag_id":"cj1p32rw7002465s66kz1yne9","_id":"cj1p32rw8002765s6kd7ri7ox"},{"post_id":"cj1p32rvc000u65s6gua0mcj5","tag_id":"cj1p32rw8002665s6x4q5433k","_id":"cj1p32rw8002965s6rehm1n1r"},{"post_id":"cj1p32rvi000z65s61sgnq98l","tag_id":"cj1p32rw7002465s66kz1yne9","_id":"cj1p32rw9002c65s6hn8kjknu"},{"post_id":"cj1p32rvh000y65s64asigjh3","tag_id":"cj1p34zup0000fss68yi8t89l","_id":"cj1p34zv60004fss68q7j5lsc"},{"post_id":"cj1p32rvh000y65s64asigjh3","tag_id":"cj1p34zv40002fss6o06sr9uu","_id":"cj1p34zv60005fss62p3dl4ww"},{"post_id":"cj34k6kep00002qz742tkmq3m","tag_id":"cj34k6kev00012qz7axgbvpp6","_id":"cj34k6kf600032qz7othwaywj"},{"post_id":"cjadtkl9c0000ciz76h4e5xqi","tag_id":"cjadtkl9g0001ciz7i3prhpp9","_id":"cjadtkl9s0003ciz7y8oua4xk"}],"Tag":[{"name":"Markdown","_id":"cj1p32rud000465s6840pea8s"},{"name":"github","_id":"cj1p32ruy000e65s6doc9e9q4"},{"name":"leveldb","_id":"cj1p32rv4000k65s6uo4pqm22"},{"name":"redis","_id":"cj1p32rv8000r65s61laj99u7"},{"name":"cache_server","_id":"cj1p32rvf000w65s65how7tn6"},{"name":"Spark","_id":"cj1p32rvj001265s6sv4zkjv8"},{"name":"推荐系统","_id":"cj1p32rvl001765s6hpvoakij"},{"name":"Spark MLlib","_id":"cj1p32rvt001g65s6d3ohuxhh"},{"name":"caffe","_id":"cj1p32rvu001j65s6no33fm1w"},{"name":"深度学习","_id":"cj1p32rvx001o65s6jcwj3c81"},{"name":"mxnet","_id":"cj1p32rw1001w65s6yrs1nvzt"},{"name":"机器学习","_id":"cj1p32rw2001y65s60qekd1mt"},{"name":"tensoflow","_id":"cj1p32rw3002265s6xfqwi8r0"},{"name":"word2vec","_id":"cj1p32rw7002465s66kz1yne9"},{"name":"mysql","_id":"cj1p32rw8002665s6x4q5433k"},{"name":"leetcode","_id":"cj1p32rw8002865s6wf8gl0v8"},{"name":"指针","_id":"cj1p34zup0000fss68yi8t89l"},{"name":"链表","_id":"cj1p34zv40002fss6o06sr9uu"},{"name":"backtracking","_id":"cj34k6kev00012qz7axgbvpp6"},{"name":"Python","_id":"cjadtkl9g0001ciz7i3prhpp9"}]}}